// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.27.0
// source: user_management/user-management-service.proto

package api

import (
	context "context"
	api_types "github.com/influenzanet/go-utils/pkg/api_types"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserManagementApiClient is the client API for UserManagementApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserManagementApiClient interface {
	Status(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ServiceStatus, error)
	// Auth and Token handling:
	SendVerificationCode(ctx context.Context, in *SendVerificationCodeReq, opts ...grpc.CallOption) (*ServiceStatus, error)
	AutoValidateTempToken(ctx context.Context, in *AutoValidateReq, opts ...grpc.CallOption) (*AutoValidateResponse, error)
	LoginWithEmail(ctx context.Context, in *LoginWithEmailMsg, opts ...grpc.CallOption) (*LoginResponse, error)
	LoginWithExternalIDP(ctx context.Context, in *LoginWithExternalIDPMsg, opts ...grpc.CallOption) (*LoginResponse, error)
	SignupWithEmail(ctx context.Context, in *SignupWithEmailMsg, opts ...grpc.CallOption) (*TokenResponse, error)
	ValidateJWT(ctx context.Context, in *JWTRequest, opts ...grpc.CallOption) (*api_types.TokenInfos, error)
	RenewJWT(ctx context.Context, in *RefreshJWTRequest, opts ...grpc.CallOption) (*TokenResponse, error)
	RevokeAllRefreshTokens(ctx context.Context, in *RevokeRefreshTokensReq, opts ...grpc.CallOption) (*ServiceStatus, error)
	VerifyContact(ctx context.Context, in *TempToken, opts ...grpc.CallOption) (*User, error)
	ResendContactVerification(ctx context.Context, in *ResendContactVerificationReq, opts ...grpc.CallOption) (*ServiceStatus, error)
	ValidateAppToken(ctx context.Context, in *AppTokenRequest, opts ...grpc.CallOption) (*AppTokenValidation, error)
	// Temporary Tokens handling:
	GetOrCreateTemptoken(ctx context.Context, in *api_types.TempTokenInfo, opts ...grpc.CallOption) (*TempToken, error)
	GenerateTempToken(ctx context.Context, in *api_types.TempTokenInfo, opts ...grpc.CallOption) (*TempToken, error)
	GetTempTokens(ctx context.Context, in *api_types.TempTokenInfo, opts ...grpc.CallOption) (*api_types.TempTokenInfos, error)
	DeleteTempToken(ctx context.Context, in *TempToken, opts ...grpc.CallOption) (*ServiceStatus, error)
	PurgeUserTempTokens(ctx context.Context, in *api_types.TempTokenInfo, opts ...grpc.CallOption) (*ServiceStatus, error)
	// User properties:
	GetUser(ctx context.Context, in *UserReference, opts ...grpc.CallOption) (*User, error)
	// Account methods:
	ChangePassword(ctx context.Context, in *PasswordChangeMsg, opts ...grpc.CallOption) (*ServiceStatus, error)
	ChangeAccountIDEmail(ctx context.Context, in *EmailChangeMsg, opts ...grpc.CallOption) (*User, error)
	DeleteAccount(ctx context.Context, in *UserReference, opts ...grpc.CallOption) (*ServiceStatus, error)
	ChangePreferredLanguage(ctx context.Context, in *LanguageChangeMsg, opts ...grpc.CallOption) (*User, error)
	// PW reset:
	InitiatePasswordReset(ctx context.Context, in *InitiateResetPasswordMsg, opts ...grpc.CallOption) (*ServiceStatus, error)
	GetInfosForPasswordReset(ctx context.Context, in *GetInfosForResetPasswordMsg, opts ...grpc.CallOption) (*UserInfoForPWReset, error)
	ResetPassword(ctx context.Context, in *ResetPasswordMsg, opts ...grpc.CallOption) (*ServiceStatus, error)
	// Profile methods:
	SaveProfile(ctx context.Context, in *ProfileRequest, opts ...grpc.CallOption) (*User, error)
	RemoveProfile(ctx context.Context, in *ProfileRequest, opts ...grpc.CallOption) (*User, error)
	// Contacts:
	UseUnsubscribeToken(ctx context.Context, in *TempToken, opts ...grpc.CallOption) (*ServiceStatus, error)
	UpdateContactPreferences(ctx context.Context, in *ContactPreferencesMsg, opts ...grpc.CallOption) (*User, error)
	AddEmail(ctx context.Context, in *ContactInfoMsg, opts ...grpc.CallOption) (*User, error)
	RemoveEmail(ctx context.Context, in *ContactInfoMsg, opts ...grpc.CallOption) (*User, error)
	// Management Methods:
	CreateUser(ctx context.Context, in *CreateUserReq, opts ...grpc.CallOption) (*User, error)
	AddRoleForUser(ctx context.Context, in *RoleMsg, opts ...grpc.CallOption) (*User, error)
	RemoveRoleForUser(ctx context.Context, in *RoleMsg, opts ...grpc.CallOption) (*User, error)
	FindNonParticipantUsers(ctx context.Context, in *FindNonParticipantUsersMsg, opts ...grpc.CallOption) (*UserListMsg, error)
	StreamUsers(ctx context.Context, in *StreamUsersMsg, opts ...grpc.CallOption) (UserManagementApi_StreamUsersClient, error)
}

type userManagementApiClient struct {
	cc grpc.ClientConnInterface
}

func NewUserManagementApiClient(cc grpc.ClientConnInterface) UserManagementApiClient {
	return &userManagementApiClient{cc}
}

func (c *userManagementApiClient) Status(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ServiceStatus, error) {
	out := new(ServiceStatus)
	err := c.cc.Invoke(ctx, "/influenzanet.user_management_api.UserManagementApi/Status", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementApiClient) SendVerificationCode(ctx context.Context, in *SendVerificationCodeReq, opts ...grpc.CallOption) (*ServiceStatus, error) {
	out := new(ServiceStatus)
	err := c.cc.Invoke(ctx, "/influenzanet.user_management_api.UserManagementApi/SendVerificationCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementApiClient) AutoValidateTempToken(ctx context.Context, in *AutoValidateReq, opts ...grpc.CallOption) (*AutoValidateResponse, error) {
	out := new(AutoValidateResponse)
	err := c.cc.Invoke(ctx, "/influenzanet.user_management_api.UserManagementApi/AutoValidateTempToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementApiClient) LoginWithEmail(ctx context.Context, in *LoginWithEmailMsg, opts ...grpc.CallOption) (*LoginResponse, error) {
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, "/influenzanet.user_management_api.UserManagementApi/LoginWithEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementApiClient) LoginWithExternalIDP(ctx context.Context, in *LoginWithExternalIDPMsg, opts ...grpc.CallOption) (*LoginResponse, error) {
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, "/influenzanet.user_management_api.UserManagementApi/LoginWithExternalIDP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementApiClient) SignupWithEmail(ctx context.Context, in *SignupWithEmailMsg, opts ...grpc.CallOption) (*TokenResponse, error) {
	out := new(TokenResponse)
	err := c.cc.Invoke(ctx, "/influenzanet.user_management_api.UserManagementApi/SignupWithEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementApiClient) ValidateJWT(ctx context.Context, in *JWTRequest, opts ...grpc.CallOption) (*api_types.TokenInfos, error) {
	out := new(api_types.TokenInfos)
	err := c.cc.Invoke(ctx, "/influenzanet.user_management_api.UserManagementApi/ValidateJWT", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementApiClient) RenewJWT(ctx context.Context, in *RefreshJWTRequest, opts ...grpc.CallOption) (*TokenResponse, error) {
	out := new(TokenResponse)
	err := c.cc.Invoke(ctx, "/influenzanet.user_management_api.UserManagementApi/RenewJWT", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementApiClient) RevokeAllRefreshTokens(ctx context.Context, in *RevokeRefreshTokensReq, opts ...grpc.CallOption) (*ServiceStatus, error) {
	out := new(ServiceStatus)
	err := c.cc.Invoke(ctx, "/influenzanet.user_management_api.UserManagementApi/RevokeAllRefreshTokens", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementApiClient) VerifyContact(ctx context.Context, in *TempToken, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/influenzanet.user_management_api.UserManagementApi/VerifyContact", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementApiClient) ResendContactVerification(ctx context.Context, in *ResendContactVerificationReq, opts ...grpc.CallOption) (*ServiceStatus, error) {
	out := new(ServiceStatus)
	err := c.cc.Invoke(ctx, "/influenzanet.user_management_api.UserManagementApi/ResendContactVerification", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementApiClient) ValidateAppToken(ctx context.Context, in *AppTokenRequest, opts ...grpc.CallOption) (*AppTokenValidation, error) {
	out := new(AppTokenValidation)
	err := c.cc.Invoke(ctx, "/influenzanet.user_management_api.UserManagementApi/ValidateAppToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementApiClient) GetOrCreateTemptoken(ctx context.Context, in *api_types.TempTokenInfo, opts ...grpc.CallOption) (*TempToken, error) {
	out := new(TempToken)
	err := c.cc.Invoke(ctx, "/influenzanet.user_management_api.UserManagementApi/GetOrCreateTemptoken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementApiClient) GenerateTempToken(ctx context.Context, in *api_types.TempTokenInfo, opts ...grpc.CallOption) (*TempToken, error) {
	out := new(TempToken)
	err := c.cc.Invoke(ctx, "/influenzanet.user_management_api.UserManagementApi/GenerateTempToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementApiClient) GetTempTokens(ctx context.Context, in *api_types.TempTokenInfo, opts ...grpc.CallOption) (*api_types.TempTokenInfos, error) {
	out := new(api_types.TempTokenInfos)
	err := c.cc.Invoke(ctx, "/influenzanet.user_management_api.UserManagementApi/GetTempTokens", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementApiClient) DeleteTempToken(ctx context.Context, in *TempToken, opts ...grpc.CallOption) (*ServiceStatus, error) {
	out := new(ServiceStatus)
	err := c.cc.Invoke(ctx, "/influenzanet.user_management_api.UserManagementApi/DeleteTempToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementApiClient) PurgeUserTempTokens(ctx context.Context, in *api_types.TempTokenInfo, opts ...grpc.CallOption) (*ServiceStatus, error) {
	out := new(ServiceStatus)
	err := c.cc.Invoke(ctx, "/influenzanet.user_management_api.UserManagementApi/PurgeUserTempTokens", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementApiClient) GetUser(ctx context.Context, in *UserReference, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/influenzanet.user_management_api.UserManagementApi/GetUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementApiClient) ChangePassword(ctx context.Context, in *PasswordChangeMsg, opts ...grpc.CallOption) (*ServiceStatus, error) {
	out := new(ServiceStatus)
	err := c.cc.Invoke(ctx, "/influenzanet.user_management_api.UserManagementApi/ChangePassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementApiClient) ChangeAccountIDEmail(ctx context.Context, in *EmailChangeMsg, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/influenzanet.user_management_api.UserManagementApi/ChangeAccountIDEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementApiClient) DeleteAccount(ctx context.Context, in *UserReference, opts ...grpc.CallOption) (*ServiceStatus, error) {
	out := new(ServiceStatus)
	err := c.cc.Invoke(ctx, "/influenzanet.user_management_api.UserManagementApi/DeleteAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementApiClient) ChangePreferredLanguage(ctx context.Context, in *LanguageChangeMsg, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/influenzanet.user_management_api.UserManagementApi/ChangePreferredLanguage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementApiClient) InitiatePasswordReset(ctx context.Context, in *InitiateResetPasswordMsg, opts ...grpc.CallOption) (*ServiceStatus, error) {
	out := new(ServiceStatus)
	err := c.cc.Invoke(ctx, "/influenzanet.user_management_api.UserManagementApi/InitiatePasswordReset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementApiClient) GetInfosForPasswordReset(ctx context.Context, in *GetInfosForResetPasswordMsg, opts ...grpc.CallOption) (*UserInfoForPWReset, error) {
	out := new(UserInfoForPWReset)
	err := c.cc.Invoke(ctx, "/influenzanet.user_management_api.UserManagementApi/GetInfosForPasswordReset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementApiClient) ResetPassword(ctx context.Context, in *ResetPasswordMsg, opts ...grpc.CallOption) (*ServiceStatus, error) {
	out := new(ServiceStatus)
	err := c.cc.Invoke(ctx, "/influenzanet.user_management_api.UserManagementApi/ResetPassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementApiClient) SaveProfile(ctx context.Context, in *ProfileRequest, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/influenzanet.user_management_api.UserManagementApi/SaveProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementApiClient) RemoveProfile(ctx context.Context, in *ProfileRequest, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/influenzanet.user_management_api.UserManagementApi/RemoveProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementApiClient) UseUnsubscribeToken(ctx context.Context, in *TempToken, opts ...grpc.CallOption) (*ServiceStatus, error) {
	out := new(ServiceStatus)
	err := c.cc.Invoke(ctx, "/influenzanet.user_management_api.UserManagementApi/UseUnsubscribeToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementApiClient) UpdateContactPreferences(ctx context.Context, in *ContactPreferencesMsg, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/influenzanet.user_management_api.UserManagementApi/UpdateContactPreferences", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementApiClient) AddEmail(ctx context.Context, in *ContactInfoMsg, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/influenzanet.user_management_api.UserManagementApi/AddEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementApiClient) RemoveEmail(ctx context.Context, in *ContactInfoMsg, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/influenzanet.user_management_api.UserManagementApi/RemoveEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementApiClient) CreateUser(ctx context.Context, in *CreateUserReq, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/influenzanet.user_management_api.UserManagementApi/CreateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementApiClient) AddRoleForUser(ctx context.Context, in *RoleMsg, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/influenzanet.user_management_api.UserManagementApi/AddRoleForUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementApiClient) RemoveRoleForUser(ctx context.Context, in *RoleMsg, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/influenzanet.user_management_api.UserManagementApi/RemoveRoleForUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementApiClient) FindNonParticipantUsers(ctx context.Context, in *FindNonParticipantUsersMsg, opts ...grpc.CallOption) (*UserListMsg, error) {
	out := new(UserListMsg)
	err := c.cc.Invoke(ctx, "/influenzanet.user_management_api.UserManagementApi/FindNonParticipantUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementApiClient) StreamUsers(ctx context.Context, in *StreamUsersMsg, opts ...grpc.CallOption) (UserManagementApi_StreamUsersClient, error) {
	stream, err := c.cc.NewStream(ctx, &UserManagementApi_ServiceDesc.Streams[0], "/influenzanet.user_management_api.UserManagementApi/StreamUsers", opts...)
	if err != nil {
		return nil, err
	}
	x := &userManagementApiStreamUsersClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type UserManagementApi_StreamUsersClient interface {
	Recv() (*User, error)
	grpc.ClientStream
}

type userManagementApiStreamUsersClient struct {
	grpc.ClientStream
}

func (x *userManagementApiStreamUsersClient) Recv() (*User, error) {
	m := new(User)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// UserManagementApiServer is the server API for UserManagementApi service.
// All implementations must embed UnimplementedUserManagementApiServer
// for forward compatibility
type UserManagementApiServer interface {
	Status(context.Context, *emptypb.Empty) (*ServiceStatus, error)
	// Auth and Token handling:
	SendVerificationCode(context.Context, *SendVerificationCodeReq) (*ServiceStatus, error)
	AutoValidateTempToken(context.Context, *AutoValidateReq) (*AutoValidateResponse, error)
	LoginWithEmail(context.Context, *LoginWithEmailMsg) (*LoginResponse, error)
	LoginWithExternalIDP(context.Context, *LoginWithExternalIDPMsg) (*LoginResponse, error)
	SignupWithEmail(context.Context, *SignupWithEmailMsg) (*TokenResponse, error)
	ValidateJWT(context.Context, *JWTRequest) (*api_types.TokenInfos, error)
	RenewJWT(context.Context, *RefreshJWTRequest) (*TokenResponse, error)
	RevokeAllRefreshTokens(context.Context, *RevokeRefreshTokensReq) (*ServiceStatus, error)
	VerifyContact(context.Context, *TempToken) (*User, error)
	ResendContactVerification(context.Context, *ResendContactVerificationReq) (*ServiceStatus, error)
	ValidateAppToken(context.Context, *AppTokenRequest) (*AppTokenValidation, error)
	// Temporary Tokens handling:
	GetOrCreateTemptoken(context.Context, *api_types.TempTokenInfo) (*TempToken, error)
	GenerateTempToken(context.Context, *api_types.TempTokenInfo) (*TempToken, error)
	GetTempTokens(context.Context, *api_types.TempTokenInfo) (*api_types.TempTokenInfos, error)
	DeleteTempToken(context.Context, *TempToken) (*ServiceStatus, error)
	PurgeUserTempTokens(context.Context, *api_types.TempTokenInfo) (*ServiceStatus, error)
	// User properties:
	GetUser(context.Context, *UserReference) (*User, error)
	// Account methods:
	ChangePassword(context.Context, *PasswordChangeMsg) (*ServiceStatus, error)
	ChangeAccountIDEmail(context.Context, *EmailChangeMsg) (*User, error)
	DeleteAccount(context.Context, *UserReference) (*ServiceStatus, error)
	ChangePreferredLanguage(context.Context, *LanguageChangeMsg) (*User, error)
	// PW reset:
	InitiatePasswordReset(context.Context, *InitiateResetPasswordMsg) (*ServiceStatus, error)
	GetInfosForPasswordReset(context.Context, *GetInfosForResetPasswordMsg) (*UserInfoForPWReset, error)
	ResetPassword(context.Context, *ResetPasswordMsg) (*ServiceStatus, error)
	// Profile methods:
	SaveProfile(context.Context, *ProfileRequest) (*User, error)
	RemoveProfile(context.Context, *ProfileRequest) (*User, error)
	// Contacts:
	UseUnsubscribeToken(context.Context, *TempToken) (*ServiceStatus, error)
	UpdateContactPreferences(context.Context, *ContactPreferencesMsg) (*User, error)
	AddEmail(context.Context, *ContactInfoMsg) (*User, error)
	RemoveEmail(context.Context, *ContactInfoMsg) (*User, error)
	// Management Methods:
	CreateUser(context.Context, *CreateUserReq) (*User, error)
	AddRoleForUser(context.Context, *RoleMsg) (*User, error)
	RemoveRoleForUser(context.Context, *RoleMsg) (*User, error)
	FindNonParticipantUsers(context.Context, *FindNonParticipantUsersMsg) (*UserListMsg, error)
	StreamUsers(*StreamUsersMsg, UserManagementApi_StreamUsersServer) error
	mustEmbedUnimplementedUserManagementApiServer()
}

// UnimplementedUserManagementApiServer must be embedded to have forward compatible implementations.
type UnimplementedUserManagementApiServer struct {
}

func (UnimplementedUserManagementApiServer) Status(context.Context, *emptypb.Empty) (*ServiceStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Status not implemented")
}
func (UnimplementedUserManagementApiServer) SendVerificationCode(context.Context, *SendVerificationCodeReq) (*ServiceStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendVerificationCode not implemented")
}
func (UnimplementedUserManagementApiServer) AutoValidateTempToken(context.Context, *AutoValidateReq) (*AutoValidateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AutoValidateTempToken not implemented")
}
func (UnimplementedUserManagementApiServer) LoginWithEmail(context.Context, *LoginWithEmailMsg) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginWithEmail not implemented")
}
func (UnimplementedUserManagementApiServer) LoginWithExternalIDP(context.Context, *LoginWithExternalIDPMsg) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginWithExternalIDP not implemented")
}
func (UnimplementedUserManagementApiServer) SignupWithEmail(context.Context, *SignupWithEmailMsg) (*TokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignupWithEmail not implemented")
}
func (UnimplementedUserManagementApiServer) ValidateJWT(context.Context, *JWTRequest) (*api_types.TokenInfos, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateJWT not implemented")
}
func (UnimplementedUserManagementApiServer) RenewJWT(context.Context, *RefreshJWTRequest) (*TokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RenewJWT not implemented")
}
func (UnimplementedUserManagementApiServer) RevokeAllRefreshTokens(context.Context, *RevokeRefreshTokensReq) (*ServiceStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevokeAllRefreshTokens not implemented")
}
func (UnimplementedUserManagementApiServer) VerifyContact(context.Context, *TempToken) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyContact not implemented")
}
func (UnimplementedUserManagementApiServer) ResendContactVerification(context.Context, *ResendContactVerificationReq) (*ServiceStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResendContactVerification not implemented")
}
func (UnimplementedUserManagementApiServer) ValidateAppToken(context.Context, *AppTokenRequest) (*AppTokenValidation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateAppToken not implemented")
}
func (UnimplementedUserManagementApiServer) GetOrCreateTemptoken(context.Context, *api_types.TempTokenInfo) (*TempToken, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrCreateTemptoken not implemented")
}
func (UnimplementedUserManagementApiServer) GenerateTempToken(context.Context, *api_types.TempTokenInfo) (*TempToken, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateTempToken not implemented")
}
func (UnimplementedUserManagementApiServer) GetTempTokens(context.Context, *api_types.TempTokenInfo) (*api_types.TempTokenInfos, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTempTokens not implemented")
}
func (UnimplementedUserManagementApiServer) DeleteTempToken(context.Context, *TempToken) (*ServiceStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTempToken not implemented")
}
func (UnimplementedUserManagementApiServer) PurgeUserTempTokens(context.Context, *api_types.TempTokenInfo) (*ServiceStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PurgeUserTempTokens not implemented")
}
func (UnimplementedUserManagementApiServer) GetUser(context.Context, *UserReference) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedUserManagementApiServer) ChangePassword(context.Context, *PasswordChangeMsg) (*ServiceStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangePassword not implemented")
}
func (UnimplementedUserManagementApiServer) ChangeAccountIDEmail(context.Context, *EmailChangeMsg) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeAccountIDEmail not implemented")
}
func (UnimplementedUserManagementApiServer) DeleteAccount(context.Context, *UserReference) (*ServiceStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAccount not implemented")
}
func (UnimplementedUserManagementApiServer) ChangePreferredLanguage(context.Context, *LanguageChangeMsg) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangePreferredLanguage not implemented")
}
func (UnimplementedUserManagementApiServer) InitiatePasswordReset(context.Context, *InitiateResetPasswordMsg) (*ServiceStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitiatePasswordReset not implemented")
}
func (UnimplementedUserManagementApiServer) GetInfosForPasswordReset(context.Context, *GetInfosForResetPasswordMsg) (*UserInfoForPWReset, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInfosForPasswordReset not implemented")
}
func (UnimplementedUserManagementApiServer) ResetPassword(context.Context, *ResetPasswordMsg) (*ServiceStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetPassword not implemented")
}
func (UnimplementedUserManagementApiServer) SaveProfile(context.Context, *ProfileRequest) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveProfile not implemented")
}
func (UnimplementedUserManagementApiServer) RemoveProfile(context.Context, *ProfileRequest) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveProfile not implemented")
}
func (UnimplementedUserManagementApiServer) UseUnsubscribeToken(context.Context, *TempToken) (*ServiceStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UseUnsubscribeToken not implemented")
}
func (UnimplementedUserManagementApiServer) UpdateContactPreferences(context.Context, *ContactPreferencesMsg) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateContactPreferences not implemented")
}
func (UnimplementedUserManagementApiServer) AddEmail(context.Context, *ContactInfoMsg) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddEmail not implemented")
}
func (UnimplementedUserManagementApiServer) RemoveEmail(context.Context, *ContactInfoMsg) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveEmail not implemented")
}
func (UnimplementedUserManagementApiServer) CreateUser(context.Context, *CreateUserReq) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedUserManagementApiServer) AddRoleForUser(context.Context, *RoleMsg) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRoleForUser not implemented")
}
func (UnimplementedUserManagementApiServer) RemoveRoleForUser(context.Context, *RoleMsg) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveRoleForUser not implemented")
}
func (UnimplementedUserManagementApiServer) FindNonParticipantUsers(context.Context, *FindNonParticipantUsersMsg) (*UserListMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindNonParticipantUsers not implemented")
}
func (UnimplementedUserManagementApiServer) StreamUsers(*StreamUsersMsg, UserManagementApi_StreamUsersServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamUsers not implemented")
}
func (UnimplementedUserManagementApiServer) mustEmbedUnimplementedUserManagementApiServer() {}

// UnsafeUserManagementApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserManagementApiServer will
// result in compilation errors.
type UnsafeUserManagementApiServer interface {
	mustEmbedUnimplementedUserManagementApiServer()
}

func RegisterUserManagementApiServer(s grpc.ServiceRegistrar, srv UserManagementApiServer) {
	s.RegisterService(&UserManagementApi_ServiceDesc, srv)
}

func _UserManagementApi_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementApiServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/influenzanet.user_management_api.UserManagementApi/Status",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementApiServer).Status(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagementApi_SendVerificationCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendVerificationCodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementApiServer).SendVerificationCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/influenzanet.user_management_api.UserManagementApi/SendVerificationCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementApiServer).SendVerificationCode(ctx, req.(*SendVerificationCodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagementApi_AutoValidateTempToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AutoValidateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementApiServer).AutoValidateTempToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/influenzanet.user_management_api.UserManagementApi/AutoValidateTempToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementApiServer).AutoValidateTempToken(ctx, req.(*AutoValidateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagementApi_LoginWithEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginWithEmailMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementApiServer).LoginWithEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/influenzanet.user_management_api.UserManagementApi/LoginWithEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementApiServer).LoginWithEmail(ctx, req.(*LoginWithEmailMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagementApi_LoginWithExternalIDP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginWithExternalIDPMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementApiServer).LoginWithExternalIDP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/influenzanet.user_management_api.UserManagementApi/LoginWithExternalIDP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementApiServer).LoginWithExternalIDP(ctx, req.(*LoginWithExternalIDPMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagementApi_SignupWithEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignupWithEmailMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementApiServer).SignupWithEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/influenzanet.user_management_api.UserManagementApi/SignupWithEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementApiServer).SignupWithEmail(ctx, req.(*SignupWithEmailMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagementApi_ValidateJWT_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JWTRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementApiServer).ValidateJWT(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/influenzanet.user_management_api.UserManagementApi/ValidateJWT",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementApiServer).ValidateJWT(ctx, req.(*JWTRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagementApi_RenewJWT_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshJWTRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementApiServer).RenewJWT(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/influenzanet.user_management_api.UserManagementApi/RenewJWT",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementApiServer).RenewJWT(ctx, req.(*RefreshJWTRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagementApi_RevokeAllRefreshTokens_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RevokeRefreshTokensReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementApiServer).RevokeAllRefreshTokens(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/influenzanet.user_management_api.UserManagementApi/RevokeAllRefreshTokens",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementApiServer).RevokeAllRefreshTokens(ctx, req.(*RevokeRefreshTokensReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagementApi_VerifyContact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TempToken)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementApiServer).VerifyContact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/influenzanet.user_management_api.UserManagementApi/VerifyContact",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementApiServer).VerifyContact(ctx, req.(*TempToken))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagementApi_ResendContactVerification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResendContactVerificationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementApiServer).ResendContactVerification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/influenzanet.user_management_api.UserManagementApi/ResendContactVerification",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementApiServer).ResendContactVerification(ctx, req.(*ResendContactVerificationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagementApi_ValidateAppToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementApiServer).ValidateAppToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/influenzanet.user_management_api.UserManagementApi/ValidateAppToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementApiServer).ValidateAppToken(ctx, req.(*AppTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagementApi_GetOrCreateTemptoken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api_types.TempTokenInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementApiServer).GetOrCreateTemptoken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/influenzanet.user_management_api.UserManagementApi/GetOrCreateTemptoken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementApiServer).GetOrCreateTemptoken(ctx, req.(*api_types.TempTokenInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagementApi_GenerateTempToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api_types.TempTokenInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementApiServer).GenerateTempToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/influenzanet.user_management_api.UserManagementApi/GenerateTempToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementApiServer).GenerateTempToken(ctx, req.(*api_types.TempTokenInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagementApi_GetTempTokens_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api_types.TempTokenInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementApiServer).GetTempTokens(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/influenzanet.user_management_api.UserManagementApi/GetTempTokens",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementApiServer).GetTempTokens(ctx, req.(*api_types.TempTokenInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagementApi_DeleteTempToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TempToken)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementApiServer).DeleteTempToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/influenzanet.user_management_api.UserManagementApi/DeleteTempToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementApiServer).DeleteTempToken(ctx, req.(*TempToken))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagementApi_PurgeUserTempTokens_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api_types.TempTokenInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementApiServer).PurgeUserTempTokens(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/influenzanet.user_management_api.UserManagementApi/PurgeUserTempTokens",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementApiServer).PurgeUserTempTokens(ctx, req.(*api_types.TempTokenInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagementApi_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserReference)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementApiServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/influenzanet.user_management_api.UserManagementApi/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementApiServer).GetUser(ctx, req.(*UserReference))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagementApi_ChangePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PasswordChangeMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementApiServer).ChangePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/influenzanet.user_management_api.UserManagementApi/ChangePassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementApiServer).ChangePassword(ctx, req.(*PasswordChangeMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagementApi_ChangeAccountIDEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmailChangeMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementApiServer).ChangeAccountIDEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/influenzanet.user_management_api.UserManagementApi/ChangeAccountIDEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementApiServer).ChangeAccountIDEmail(ctx, req.(*EmailChangeMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagementApi_DeleteAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserReference)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementApiServer).DeleteAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/influenzanet.user_management_api.UserManagementApi/DeleteAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementApiServer).DeleteAccount(ctx, req.(*UserReference))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagementApi_ChangePreferredLanguage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LanguageChangeMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementApiServer).ChangePreferredLanguage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/influenzanet.user_management_api.UserManagementApi/ChangePreferredLanguage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementApiServer).ChangePreferredLanguage(ctx, req.(*LanguageChangeMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagementApi_InitiatePasswordReset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitiateResetPasswordMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementApiServer).InitiatePasswordReset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/influenzanet.user_management_api.UserManagementApi/InitiatePasswordReset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementApiServer).InitiatePasswordReset(ctx, req.(*InitiateResetPasswordMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagementApi_GetInfosForPasswordReset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInfosForResetPasswordMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementApiServer).GetInfosForPasswordReset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/influenzanet.user_management_api.UserManagementApi/GetInfosForPasswordReset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementApiServer).GetInfosForPasswordReset(ctx, req.(*GetInfosForResetPasswordMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagementApi_ResetPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetPasswordMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementApiServer).ResetPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/influenzanet.user_management_api.UserManagementApi/ResetPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementApiServer).ResetPassword(ctx, req.(*ResetPasswordMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagementApi_SaveProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementApiServer).SaveProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/influenzanet.user_management_api.UserManagementApi/SaveProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementApiServer).SaveProfile(ctx, req.(*ProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagementApi_RemoveProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementApiServer).RemoveProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/influenzanet.user_management_api.UserManagementApi/RemoveProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementApiServer).RemoveProfile(ctx, req.(*ProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagementApi_UseUnsubscribeToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TempToken)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementApiServer).UseUnsubscribeToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/influenzanet.user_management_api.UserManagementApi/UseUnsubscribeToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementApiServer).UseUnsubscribeToken(ctx, req.(*TempToken))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagementApi_UpdateContactPreferences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContactPreferencesMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementApiServer).UpdateContactPreferences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/influenzanet.user_management_api.UserManagementApi/UpdateContactPreferences",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementApiServer).UpdateContactPreferences(ctx, req.(*ContactPreferencesMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagementApi_AddEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContactInfoMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementApiServer).AddEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/influenzanet.user_management_api.UserManagementApi/AddEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementApiServer).AddEmail(ctx, req.(*ContactInfoMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagementApi_RemoveEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContactInfoMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementApiServer).RemoveEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/influenzanet.user_management_api.UserManagementApi/RemoveEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementApiServer).RemoveEmail(ctx, req.(*ContactInfoMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagementApi_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementApiServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/influenzanet.user_management_api.UserManagementApi/CreateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementApiServer).CreateUser(ctx, req.(*CreateUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagementApi_AddRoleForUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementApiServer).AddRoleForUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/influenzanet.user_management_api.UserManagementApi/AddRoleForUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementApiServer).AddRoleForUser(ctx, req.(*RoleMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagementApi_RemoveRoleForUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementApiServer).RemoveRoleForUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/influenzanet.user_management_api.UserManagementApi/RemoveRoleForUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementApiServer).RemoveRoleForUser(ctx, req.(*RoleMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagementApi_FindNonParticipantUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindNonParticipantUsersMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementApiServer).FindNonParticipantUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/influenzanet.user_management_api.UserManagementApi/FindNonParticipantUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementApiServer).FindNonParticipantUsers(ctx, req.(*FindNonParticipantUsersMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagementApi_StreamUsers_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamUsersMsg)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(UserManagementApiServer).StreamUsers(m, &userManagementApiStreamUsersServer{stream})
}

type UserManagementApi_StreamUsersServer interface {
	Send(*User) error
	grpc.ServerStream
}

type userManagementApiStreamUsersServer struct {
	grpc.ServerStream
}

func (x *userManagementApiStreamUsersServer) Send(m *User) error {
	return x.ServerStream.SendMsg(m)
}

// UserManagementApi_ServiceDesc is the grpc.ServiceDesc for UserManagementApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserManagementApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "influenzanet.user_management_api.UserManagementApi",
	HandlerType: (*UserManagementApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Status",
			Handler:    _UserManagementApi_Status_Handler,
		},
		{
			MethodName: "SendVerificationCode",
			Handler:    _UserManagementApi_SendVerificationCode_Handler,
		},
		{
			MethodName: "AutoValidateTempToken",
			Handler:    _UserManagementApi_AutoValidateTempToken_Handler,
		},
		{
			MethodName: "LoginWithEmail",
			Handler:    _UserManagementApi_LoginWithEmail_Handler,
		},
		{
			MethodName: "LoginWithExternalIDP",
			Handler:    _UserManagementApi_LoginWithExternalIDP_Handler,
		},
		{
			MethodName: "SignupWithEmail",
			Handler:    _UserManagementApi_SignupWithEmail_Handler,
		},
		{
			MethodName: "ValidateJWT",
			Handler:    _UserManagementApi_ValidateJWT_Handler,
		},
		{
			MethodName: "RenewJWT",
			Handler:    _UserManagementApi_RenewJWT_Handler,
		},
		{
			MethodName: "RevokeAllRefreshTokens",
			Handler:    _UserManagementApi_RevokeAllRefreshTokens_Handler,
		},
		{
			MethodName: "VerifyContact",
			Handler:    _UserManagementApi_VerifyContact_Handler,
		},
		{
			MethodName: "ResendContactVerification",
			Handler:    _UserManagementApi_ResendContactVerification_Handler,
		},
		{
			MethodName: "ValidateAppToken",
			Handler:    _UserManagementApi_ValidateAppToken_Handler,
		},
		{
			MethodName: "GetOrCreateTemptoken",
			Handler:    _UserManagementApi_GetOrCreateTemptoken_Handler,
		},
		{
			MethodName: "GenerateTempToken",
			Handler:    _UserManagementApi_GenerateTempToken_Handler,
		},
		{
			MethodName: "GetTempTokens",
			Handler:    _UserManagementApi_GetTempTokens_Handler,
		},
		{
			MethodName: "DeleteTempToken",
			Handler:    _UserManagementApi_DeleteTempToken_Handler,
		},
		{
			MethodName: "PurgeUserTempTokens",
			Handler:    _UserManagementApi_PurgeUserTempTokens_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _UserManagementApi_GetUser_Handler,
		},
		{
			MethodName: "ChangePassword",
			Handler:    _UserManagementApi_ChangePassword_Handler,
		},
		{
			MethodName: "ChangeAccountIDEmail",
			Handler:    _UserManagementApi_ChangeAccountIDEmail_Handler,
		},
		{
			MethodName: "DeleteAccount",
			Handler:    _UserManagementApi_DeleteAccount_Handler,
		},
		{
			MethodName: "ChangePreferredLanguage",
			Handler:    _UserManagementApi_ChangePreferredLanguage_Handler,
		},
		{
			MethodName: "InitiatePasswordReset",
			Handler:    _UserManagementApi_InitiatePasswordReset_Handler,
		},
		{
			MethodName: "GetInfosForPasswordReset",
			Handler:    _UserManagementApi_GetInfosForPasswordReset_Handler,
		},
		{
			MethodName: "ResetPassword",
			Handler:    _UserManagementApi_ResetPassword_Handler,
		},
		{
			MethodName: "SaveProfile",
			Handler:    _UserManagementApi_SaveProfile_Handler,
		},
		{
			MethodName: "RemoveProfile",
			Handler:    _UserManagementApi_RemoveProfile_Handler,
		},
		{
			MethodName: "UseUnsubscribeToken",
			Handler:    _UserManagementApi_UseUnsubscribeToken_Handler,
		},
		{
			MethodName: "UpdateContactPreferences",
			Handler:    _UserManagementApi_UpdateContactPreferences_Handler,
		},
		{
			MethodName: "AddEmail",
			Handler:    _UserManagementApi_AddEmail_Handler,
		},
		{
			MethodName: "RemoveEmail",
			Handler:    _UserManagementApi_RemoveEmail_Handler,
		},
		{
			MethodName: "CreateUser",
			Handler:    _UserManagementApi_CreateUser_Handler,
		},
		{
			MethodName: "AddRoleForUser",
			Handler:    _UserManagementApi_AddRoleForUser_Handler,
		},
		{
			MethodName: "RemoveRoleForUser",
			Handler:    _UserManagementApi_RemoveRoleForUser_Handler,
		},
		{
			MethodName: "FindNonParticipantUsers",
			Handler:    _UserManagementApi_FindNonParticipantUsers_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamUsers",
			Handler:       _UserManagementApi_StreamUsers_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "user_management/user-management-service.proto",
}
