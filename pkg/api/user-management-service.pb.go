// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v5.27.0
// source: user_management/user-management-service.proto

package api

import (
	api_types "github.com/influenzanet/go-utils/pkg/api_types"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ServiceStatus_StatusValue int32

const (
	ServiceStatus_NORMAL  ServiceStatus_StatusValue = 0
	ServiceStatus_PROBLEM ServiceStatus_StatusValue = 1
)

// Enum value maps for ServiceStatus_StatusValue.
var (
	ServiceStatus_StatusValue_name = map[int32]string{
		0: "NORMAL",
		1: "PROBLEM",
	}
	ServiceStatus_StatusValue_value = map[string]int32{
		"NORMAL":  0,
		"PROBLEM": 1,
	}
)

func (x ServiceStatus_StatusValue) Enum() *ServiceStatus_StatusValue {
	p := new(ServiceStatus_StatusValue)
	*p = x
	return p
}

func (x ServiceStatus_StatusValue) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ServiceStatus_StatusValue) Descriptor() protoreflect.EnumDescriptor {
	return file_user_management_user_management_service_proto_enumTypes[0].Descriptor()
}

func (ServiceStatus_StatusValue) Type() protoreflect.EnumType {
	return &file_user_management_user_management_service_proto_enumTypes[0]
}

func (x ServiceStatus_StatusValue) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ServiceStatus_StatusValue.Descriptor instead.
func (ServiceStatus_StatusValue) EnumDescriptor() ([]byte, []int) {
	return file_user_management_user_management_service_proto_rawDescGZIP(), []int{0, 0}
}

// Status is typically used as a return value indicating if the method was
// performed normally, or the system has any internal error e.g. checking system
// status of a service
type ServiceStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  ServiceStatus_StatusValue `protobuf:"varint,1,opt,name=status,proto3,enum=influenzanet.user_management_api.ServiceStatus_StatusValue" json:"status,omitempty"`
	Msg     string                    `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Version string                    `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *ServiceStatus) Reset() {
	*x = ServiceStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_management_user_management_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceStatus) ProtoMessage() {}

func (x *ServiceStatus) ProtoReflect() protoreflect.Message {
	mi := &file_user_management_user_management_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceStatus.ProtoReflect.Descriptor instead.
func (*ServiceStatus) Descriptor() ([]byte, []int) {
	return file_user_management_user_management_service_proto_rawDescGZIP(), []int{0}
}

func (x *ServiceStatus) GetStatus() ServiceStatus_StatusValue {
	if x != nil {
		return x.Status
	}
	return ServiceStatus_NORMAL
}

func (x *ServiceStatus) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *ServiceStatus) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type SignupWithEmailMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Email             string `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"`
	Password          string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	InstanceId        string `protobuf:"bytes,3,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	PreferredLanguage string `protobuf:"bytes,4,opt,name=preferred_language,json=preferredLanguage,proto3" json:"preferred_language,omitempty"`
	WantsNewsletter   bool   `protobuf:"varint,5,opt,name=wants_newsletter,json=wantsNewsletter,proto3" json:"wants_newsletter,omitempty"`
	Use_2Fa           bool   `protobuf:"varint,6,opt,name=use_2fa,json=use2fa,proto3" json:"use_2fa,omitempty"`
	InfoCheck         string `protobuf:"bytes,7,opt,name=info_check,json=infoCheck,proto3" json:"info_check,omitempty"`
}

func (x *SignupWithEmailMsg) Reset() {
	*x = SignupWithEmailMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_management_user_management_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignupWithEmailMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignupWithEmailMsg) ProtoMessage() {}

func (x *SignupWithEmailMsg) ProtoReflect() protoreflect.Message {
	mi := &file_user_management_user_management_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignupWithEmailMsg.ProtoReflect.Descriptor instead.
func (*SignupWithEmailMsg) Descriptor() ([]byte, []int) {
	return file_user_management_user_management_service_proto_rawDescGZIP(), []int{1}
}

func (x *SignupWithEmailMsg) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *SignupWithEmailMsg) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *SignupWithEmailMsg) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *SignupWithEmailMsg) GetPreferredLanguage() string {
	if x != nil {
		return x.PreferredLanguage
	}
	return ""
}

func (x *SignupWithEmailMsg) GetWantsNewsletter() bool {
	if x != nil {
		return x.WantsNewsletter
	}
	return false
}

func (x *SignupWithEmailMsg) GetUse_2Fa() bool {
	if x != nil {
		return x.Use_2Fa
	}
	return false
}

func (x *SignupWithEmailMsg) GetInfoCheck() string {
	if x != nil {
		return x.InfoCheck
	}
	return ""
}

type LoginWithEmailMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Email            string `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"`
	Password         string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	InstanceId       string `protobuf:"bytes,3,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	AsParticipant    bool   `protobuf:"varint,4,opt,name=as_participant,json=asParticipant,proto3" json:"as_participant,omitempty"`
	VerificationCode string `protobuf:"bytes,5,opt,name=verification_code,json=verificationCode,proto3" json:"verification_code,omitempty"`
}

func (x *LoginWithEmailMsg) Reset() {
	*x = LoginWithEmailMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_management_user_management_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoginWithEmailMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginWithEmailMsg) ProtoMessage() {}

func (x *LoginWithEmailMsg) ProtoReflect() protoreflect.Message {
	mi := &file_user_management_user_management_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginWithEmailMsg.ProtoReflect.Descriptor instead.
func (*LoginWithEmailMsg) Descriptor() ([]byte, []int) {
	return file_user_management_user_management_service_proto_rawDescGZIP(), []int{2}
}

func (x *LoginWithEmailMsg) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *LoginWithEmailMsg) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *LoginWithEmailMsg) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *LoginWithEmailMsg) GetAsParticipant() bool {
	if x != nil {
		return x.AsParticipant
	}
	return false
}

func (x *LoginWithEmailMsg) GetVerificationCode() string {
	if x != nil {
		return x.VerificationCode
	}
	return ""
}

type LoginWithExternalIDPMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstanceId string `protobuf:"bytes,1,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	Email      string `protobuf:"bytes,2,opt,name=email,proto3" json:"email,omitempty"`
	Role       string `protobuf:"bytes,3,opt,name=role,proto3" json:"role,omitempty"`
	Customer   string `protobuf:"bytes,4,opt,name=customer,proto3" json:"customer,omitempty"`
	Idp        string `protobuf:"bytes,5,opt,name=idp,proto3" json:"idp,omitempty"`
	GroupInfo  string `protobuf:"bytes,6,opt,name=group_info,json=groupInfo,proto3" json:"group_info,omitempty"`
}

func (x *LoginWithExternalIDPMsg) Reset() {
	*x = LoginWithExternalIDPMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_management_user_management_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoginWithExternalIDPMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginWithExternalIDPMsg) ProtoMessage() {}

func (x *LoginWithExternalIDPMsg) ProtoReflect() protoreflect.Message {
	mi := &file_user_management_user_management_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginWithExternalIDPMsg.ProtoReflect.Descriptor instead.
func (*LoginWithExternalIDPMsg) Descriptor() ([]byte, []int) {
	return file_user_management_user_management_service_proto_rawDescGZIP(), []int{3}
}

func (x *LoginWithExternalIDPMsg) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *LoginWithExternalIDPMsg) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *LoginWithExternalIDPMsg) GetRole() string {
	if x != nil {
		return x.Role
	}
	return ""
}

func (x *LoginWithExternalIDPMsg) GetCustomer() string {
	if x != nil {
		return x.Customer
	}
	return ""
}

func (x *LoginWithExternalIDPMsg) GetIdp() string {
	if x != nil {
		return x.Idp
	}
	return ""
}

func (x *LoginWithExternalIDPMsg) GetGroupInfo() string {
	if x != nil {
		return x.GroupInfo
	}
	return ""
}

type AutoValidateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TempToken   string `protobuf:"bytes,1,opt,name=temp_token,json=tempToken,proto3" json:"temp_token,omitempty"`
	AccessToken string `protobuf:"bytes,2,opt,name=access_token,json=accessToken,proto3" json:"access_token,omitempty"`
}

func (x *AutoValidateReq) Reset() {
	*x = AutoValidateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_management_user_management_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AutoValidateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutoValidateReq) ProtoMessage() {}

func (x *AutoValidateReq) ProtoReflect() protoreflect.Message {
	mi := &file_user_management_user_management_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutoValidateReq.ProtoReflect.Descriptor instead.
func (*AutoValidateReq) Descriptor() ([]byte, []int) {
	return file_user_management_user_management_service_proto_rawDescGZIP(), []int{4}
}

func (x *AutoValidateReq) GetTempToken() string {
	if x != nil {
		return x.TempToken
	}
	return ""
}

func (x *AutoValidateReq) GetAccessToken() string {
	if x != nil {
		return x.AccessToken
	}
	return ""
}

type AutoValidateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId        string `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	VerificationCode string `protobuf:"bytes,2,opt,name=verification_code,json=verificationCode,proto3" json:"verification_code,omitempty"`
	IsSameUser       bool   `protobuf:"varint,3,opt,name=is_same_user,json=isSameUser,proto3" json:"is_same_user,omitempty"`
	InstanceId       string `protobuf:"bytes,4,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
}

func (x *AutoValidateResponse) Reset() {
	*x = AutoValidateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_management_user_management_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AutoValidateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutoValidateResponse) ProtoMessage() {}

func (x *AutoValidateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_user_management_user_management_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutoValidateResponse.ProtoReflect.Descriptor instead.
func (*AutoValidateResponse) Descriptor() ([]byte, []int) {
	return file_user_management_user_management_service_proto_rawDescGZIP(), []int{5}
}

func (x *AutoValidateResponse) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *AutoValidateResponse) GetVerificationCode() string {
	if x != nil {
		return x.VerificationCode
	}
	return ""
}

func (x *AutoValidateResponse) GetIsSameUser() bool {
	if x != nil {
		return x.IsSameUser
	}
	return false
}

func (x *AutoValidateResponse) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

type SendVerificationCodeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Email      string `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"`
	Password   string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	InstanceId string `protobuf:"bytes,3,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
}

func (x *SendVerificationCodeReq) Reset() {
	*x = SendVerificationCodeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_management_user_management_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendVerificationCodeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendVerificationCodeReq) ProtoMessage() {}

func (x *SendVerificationCodeReq) ProtoReflect() protoreflect.Message {
	mi := &file_user_management_user_management_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendVerificationCodeReq.ProtoReflect.Descriptor instead.
func (*SendVerificationCodeReq) Descriptor() ([]byte, []int) {
	return file_user_management_user_management_service_proto_rawDescGZIP(), []int{6}
}

func (x *SendVerificationCodeReq) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *SendVerificationCodeReq) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *SendVerificationCodeReq) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

type LoginResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token              *TokenResponse `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	User               *User          `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
	SecondFactorNeeded bool           `protobuf:"varint,3,opt,name=second_factor_needed,json=secondFactorNeeded,proto3" json:"second_factor_needed,omitempty"`
}

func (x *LoginResponse) Reset() {
	*x = LoginResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_management_user_management_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoginResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginResponse) ProtoMessage() {}

func (x *LoginResponse) ProtoReflect() protoreflect.Message {
	mi := &file_user_management_user_management_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginResponse.ProtoReflect.Descriptor instead.
func (*LoginResponse) Descriptor() ([]byte, []int) {
	return file_user_management_user_management_service_proto_rawDescGZIP(), []int{7}
}

func (x *LoginResponse) GetToken() *TokenResponse {
	if x != nil {
		return x.Token
	}
	return nil
}

func (x *LoginResponse) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *LoginResponse) GetSecondFactorNeeded() bool {
	if x != nil {
		return x.SecondFactorNeeded
	}
	return false
}

type UserReference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token      *api_types.TokenInfos `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	UserId     string                `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	InstanceId string                `protobuf:"bytes,3,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
}

func (x *UserReference) Reset() {
	*x = UserReference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_management_user_management_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserReference) ProtoMessage() {}

func (x *UserReference) ProtoReflect() protoreflect.Message {
	mi := &file_user_management_user_management_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserReference.ProtoReflect.Descriptor instead.
func (*UserReference) Descriptor() ([]byte, []int) {
	return file_user_management_user_management_service_proto_rawDescGZIP(), []int{8}
}

func (x *UserReference) GetToken() *api_types.TokenInfos {
	if x != nil {
		return x.Token
	}
	return nil
}

func (x *UserReference) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UserReference) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

type RevokeRefreshTokensReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token *api_types.TokenInfos `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *RevokeRefreshTokensReq) Reset() {
	*x = RevokeRefreshTokensReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_management_user_management_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RevokeRefreshTokensReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RevokeRefreshTokensReq) ProtoMessage() {}

func (x *RevokeRefreshTokensReq) ProtoReflect() protoreflect.Message {
	mi := &file_user_management_user_management_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RevokeRefreshTokensReq.ProtoReflect.Descriptor instead.
func (*RevokeRefreshTokensReq) Descriptor() ([]byte, []int) {
	return file_user_management_user_management_service_proto_rawDescGZIP(), []int{9}
}

func (x *RevokeRefreshTokensReq) GetToken() *api_types.TokenInfos {
	if x != nil {
		return x.Token
	}
	return nil
}

type RefreshTokenRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId       string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	InstanceId   string `protobuf:"bytes,2,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	RefreshToken string `protobuf:"bytes,3,opt,name=refresh_token,json=refreshToken,proto3" json:"refresh_token,omitempty"`
}

func (x *RefreshTokenRequest) Reset() {
	*x = RefreshTokenRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_management_user_management_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefreshTokenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefreshTokenRequest) ProtoMessage() {}

func (x *RefreshTokenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_user_management_user_management_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefreshTokenRequest.ProtoReflect.Descriptor instead.
func (*RefreshTokenRequest) Descriptor() ([]byte, []int) {
	return file_user_management_user_management_service_proto_rawDescGZIP(), []int{10}
}

func (x *RefreshTokenRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *RefreshTokenRequest) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *RefreshTokenRequest) GetRefreshToken() string {
	if x != nil {
		return x.RefreshToken
	}
	return ""
}

type AppTokenRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *AppTokenRequest) Reset() {
	*x = AppTokenRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_management_user_management_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppTokenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppTokenRequest) ProtoMessage() {}

func (x *AppTokenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_user_management_user_management_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppTokenRequest.ProtoReflect.Descriptor instead.
func (*AppTokenRequest) Descriptor() ([]byte, []int) {
	return file_user_management_user_management_service_proto_rawDescGZIP(), []int{11}
}

func (x *AppTokenRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type AppTokenValidation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Instances []string `protobuf:"bytes,1,rep,name=instances,proto3" json:"instances,omitempty"`
}

func (x *AppTokenValidation) Reset() {
	*x = AppTokenValidation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_management_user_management_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppTokenValidation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppTokenValidation) ProtoMessage() {}

func (x *AppTokenValidation) ProtoReflect() protoreflect.Message {
	mi := &file_user_management_user_management_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppTokenValidation.ProtoReflect.Descriptor instead.
func (*AppTokenValidation) Descriptor() ([]byte, []int) {
	return file_user_management_user_management_service_proto_rawDescGZIP(), []int{12}
}

func (x *AppTokenValidation) GetInstances() []string {
	if x != nil {
		return x.Instances
	}
	return nil
}

type ProfileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token   *api_types.TokenInfos `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	Profile *Profile              `protobuf:"bytes,2,opt,name=profile,proto3" json:"profile,omitempty"`
}

func (x *ProfileRequest) Reset() {
	*x = ProfileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_management_user_management_service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProfileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProfileRequest) ProtoMessage() {}

func (x *ProfileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_user_management_user_management_service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProfileRequest.ProtoReflect.Descriptor instead.
func (*ProfileRequest) Descriptor() ([]byte, []int) {
	return file_user_management_user_management_service_proto_rawDescGZIP(), []int{13}
}

func (x *ProfileRequest) GetToken() *api_types.TokenInfos {
	if x != nil {
		return x.Token
	}
	return nil
}

func (x *ProfileRequest) GetProfile() *Profile {
	if x != nil {
		return x.Profile
	}
	return nil
}

type UserAuthInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId            string     `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Roles             []string   `protobuf:"bytes,2,rep,name=roles,proto3" json:"roles,omitempty"`
	InstanceId        string     `protobuf:"bytes,3,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	AccountId         string     `protobuf:"bytes,4,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"` // e.g. email address
	Profiles          []*Profile `protobuf:"bytes,5,rep,name=profiles,proto3" json:"profiles,omitempty"`
	SelectedProfile   *Profile   `protobuf:"bytes,6,opt,name=selected_profile,json=selectedProfile,proto3" json:"selected_profile,omitempty"`
	AccountConfirmed  bool       `protobuf:"varint,7,opt,name=account_confirmed,json=accountConfirmed,proto3" json:"account_confirmed,omitempty"`
	PreferredLanguage string     `protobuf:"bytes,8,opt,name=preferred_language,json=preferredLanguage,proto3" json:"preferred_language,omitempty"`
}

func (x *UserAuthInfo) Reset() {
	*x = UserAuthInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_management_user_management_service_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserAuthInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserAuthInfo) ProtoMessage() {}

func (x *UserAuthInfo) ProtoReflect() protoreflect.Message {
	mi := &file_user_management_user_management_service_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserAuthInfo.ProtoReflect.Descriptor instead.
func (*UserAuthInfo) Descriptor() ([]byte, []int) {
	return file_user_management_user_management_service_proto_rawDescGZIP(), []int{14}
}

func (x *UserAuthInfo) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UserAuthInfo) GetRoles() []string {
	if x != nil {
		return x.Roles
	}
	return nil
}

func (x *UserAuthInfo) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *UserAuthInfo) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *UserAuthInfo) GetProfiles() []*Profile {
	if x != nil {
		return x.Profiles
	}
	return nil
}

func (x *UserAuthInfo) GetSelectedProfile() *Profile {
	if x != nil {
		return x.SelectedProfile
	}
	return nil
}

func (x *UserAuthInfo) GetAccountConfirmed() bool {
	if x != nil {
		return x.AccountConfirmed
	}
	return false
}

func (x *UserAuthInfo) GetPreferredLanguage() string {
	if x != nil {
		return x.PreferredLanguage
	}
	return ""
}

type ResendContactVerificationReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token   *api_types.TokenInfos `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	Type    string                `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Address string                `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *ResendContactVerificationReq) Reset() {
	*x = ResendContactVerificationReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_management_user_management_service_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResendContactVerificationReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResendContactVerificationReq) ProtoMessage() {}

func (x *ResendContactVerificationReq) ProtoReflect() protoreflect.Message {
	mi := &file_user_management_user_management_service_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResendContactVerificationReq.ProtoReflect.Descriptor instead.
func (*ResendContactVerificationReq) Descriptor() ([]byte, []int) {
	return file_user_management_user_management_service_proto_rawDescGZIP(), []int{15}
}

func (x *ResendContactVerificationReq) GetToken() *api_types.TokenInfos {
	if x != nil {
		return x.Token
	}
	return nil
}

func (x *ResendContactVerificationReq) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ResendContactVerificationReq) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

type PasswordChangeMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token       *api_types.TokenInfos `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	OldPassword string                `protobuf:"bytes,2,opt,name=old_password,json=oldPassword,proto3" json:"old_password,omitempty"`
	NewPassword string                `protobuf:"bytes,3,opt,name=new_password,json=newPassword,proto3" json:"new_password,omitempty"`
}

func (x *PasswordChangeMsg) Reset() {
	*x = PasswordChangeMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_management_user_management_service_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PasswordChangeMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PasswordChangeMsg) ProtoMessage() {}

func (x *PasswordChangeMsg) ProtoReflect() protoreflect.Message {
	mi := &file_user_management_user_management_service_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PasswordChangeMsg.ProtoReflect.Descriptor instead.
func (*PasswordChangeMsg) Descriptor() ([]byte, []int) {
	return file_user_management_user_management_service_proto_rawDescGZIP(), []int{16}
}

func (x *PasswordChangeMsg) GetToken() *api_types.TokenInfos {
	if x != nil {
		return x.Token
	}
	return nil
}

func (x *PasswordChangeMsg) GetOldPassword() string {
	if x != nil {
		return x.OldPassword
	}
	return ""
}

func (x *PasswordChangeMsg) GetNewPassword() string {
	if x != nil {
		return x.NewPassword
	}
	return ""
}

type InitiateResetPasswordMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstanceId string `protobuf:"bytes,1,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	AccountId  string `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
}

func (x *InitiateResetPasswordMsg) Reset() {
	*x = InitiateResetPasswordMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_management_user_management_service_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InitiateResetPasswordMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitiateResetPasswordMsg) ProtoMessage() {}

func (x *InitiateResetPasswordMsg) ProtoReflect() protoreflect.Message {
	mi := &file_user_management_user_management_service_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitiateResetPasswordMsg.ProtoReflect.Descriptor instead.
func (*InitiateResetPasswordMsg) Descriptor() ([]byte, []int) {
	return file_user_management_user_management_service_proto_rawDescGZIP(), []int{17}
}

func (x *InitiateResetPasswordMsg) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *InitiateResetPasswordMsg) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

type GetInfosForResetPasswordMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *GetInfosForResetPasswordMsg) Reset() {
	*x = GetInfosForResetPasswordMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_management_user_management_service_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetInfosForResetPasswordMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInfosForResetPasswordMsg) ProtoMessage() {}

func (x *GetInfosForResetPasswordMsg) ProtoReflect() protoreflect.Message {
	mi := &file_user_management_user_management_service_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInfosForResetPasswordMsg.ProtoReflect.Descriptor instead.
func (*GetInfosForResetPasswordMsg) Descriptor() ([]byte, []int) {
	return file_user_management_user_management_service_proto_rawDescGZIP(), []int{18}
}

func (x *GetInfosForResetPasswordMsg) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type UserInfoForPWReset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId string `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
}

func (x *UserInfoForPWReset) Reset() {
	*x = UserInfoForPWReset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_management_user_management_service_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserInfoForPWReset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserInfoForPWReset) ProtoMessage() {}

func (x *UserInfoForPWReset) ProtoReflect() protoreflect.Message {
	mi := &file_user_management_user_management_service_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserInfoForPWReset.ProtoReflect.Descriptor instead.
func (*UserInfoForPWReset) Descriptor() ([]byte, []int) {
	return file_user_management_user_management_service_proto_rawDescGZIP(), []int{19}
}

func (x *UserInfoForPWReset) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

type ResetPasswordMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token       string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	NewPassword string `protobuf:"bytes,2,opt,name=new_password,json=newPassword,proto3" json:"new_password,omitempty"`
}

func (x *ResetPasswordMsg) Reset() {
	*x = ResetPasswordMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_management_user_management_service_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResetPasswordMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetPasswordMsg) ProtoMessage() {}

func (x *ResetPasswordMsg) ProtoReflect() protoreflect.Message {
	mi := &file_user_management_user_management_service_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetPasswordMsg.ProtoReflect.Descriptor instead.
func (*ResetPasswordMsg) Descriptor() ([]byte, []int) {
	return file_user_management_user_management_service_proto_rawDescGZIP(), []int{20}
}

func (x *ResetPasswordMsg) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *ResetPasswordMsg) GetNewPassword() string {
	if x != nil {
		return x.NewPassword
	}
	return ""
}

type EmailChangeMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token        *api_types.TokenInfos `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	NewEmail     string                `protobuf:"bytes,2,opt,name=new_email,json=newEmail,proto3" json:"new_email,omitempty"`
	KeepOldEmail bool                  `protobuf:"varint,3,opt,name=keep_old_email,json=keepOldEmail,proto3" json:"keep_old_email,omitempty"`
	Password     string                `protobuf:"bytes,4,opt,name=password,proto3" json:"password,omitempty"`
}

func (x *EmailChangeMsg) Reset() {
	*x = EmailChangeMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_management_user_management_service_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmailChangeMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmailChangeMsg) ProtoMessage() {}

func (x *EmailChangeMsg) ProtoReflect() protoreflect.Message {
	mi := &file_user_management_user_management_service_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmailChangeMsg.ProtoReflect.Descriptor instead.
func (*EmailChangeMsg) Descriptor() ([]byte, []int) {
	return file_user_management_user_management_service_proto_rawDescGZIP(), []int{21}
}

func (x *EmailChangeMsg) GetToken() *api_types.TokenInfos {
	if x != nil {
		return x.Token
	}
	return nil
}

func (x *EmailChangeMsg) GetNewEmail() string {
	if x != nil {
		return x.NewEmail
	}
	return ""
}

func (x *EmailChangeMsg) GetKeepOldEmail() bool {
	if x != nil {
		return x.KeepOldEmail
	}
	return false
}

func (x *EmailChangeMsg) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type LanguageChangeMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token        *api_types.TokenInfos `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	LanguageCode string                `protobuf:"bytes,2,opt,name=language_code,json=languageCode,proto3" json:"language_code,omitempty"`
}

func (x *LanguageChangeMsg) Reset() {
	*x = LanguageChangeMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_management_user_management_service_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LanguageChangeMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LanguageChangeMsg) ProtoMessage() {}

func (x *LanguageChangeMsg) ProtoReflect() protoreflect.Message {
	mi := &file_user_management_user_management_service_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LanguageChangeMsg.ProtoReflect.Descriptor instead.
func (*LanguageChangeMsg) Descriptor() ([]byte, []int) {
	return file_user_management_user_management_service_proto_rawDescGZIP(), []int{22}
}

func (x *LanguageChangeMsg) GetToken() *api_types.TokenInfos {
	if x != nil {
		return x.Token
	}
	return nil
}

func (x *LanguageChangeMsg) GetLanguageCode() string {
	if x != nil {
		return x.LanguageCode
	}
	return ""
}

type ContactPreferencesMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token              *api_types.TokenInfos `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	ContactPreferences *ContactPreferences   `protobuf:"bytes,2,opt,name=contact_preferences,json=contactPreferences,proto3" json:"contact_preferences,omitempty"`
}

func (x *ContactPreferencesMsg) Reset() {
	*x = ContactPreferencesMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_management_user_management_service_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContactPreferencesMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContactPreferencesMsg) ProtoMessage() {}

func (x *ContactPreferencesMsg) ProtoReflect() protoreflect.Message {
	mi := &file_user_management_user_management_service_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContactPreferencesMsg.ProtoReflect.Descriptor instead.
func (*ContactPreferencesMsg) Descriptor() ([]byte, []int) {
	return file_user_management_user_management_service_proto_rawDescGZIP(), []int{23}
}

func (x *ContactPreferencesMsg) GetToken() *api_types.TokenInfos {
	if x != nil {
		return x.Token
	}
	return nil
}

func (x *ContactPreferencesMsg) GetContactPreferences() *ContactPreferences {
	if x != nil {
		return x.ContactPreferences
	}
	return nil
}

type ContactInfoMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token       *api_types.TokenInfos `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	ContactInfo *ContactInfo          `protobuf:"bytes,2,opt,name=contact_info,json=contactInfo,proto3" json:"contact_info,omitempty"`
}

func (x *ContactInfoMsg) Reset() {
	*x = ContactInfoMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_management_user_management_service_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContactInfoMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContactInfoMsg) ProtoMessage() {}

func (x *ContactInfoMsg) ProtoReflect() protoreflect.Message {
	mi := &file_user_management_user_management_service_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContactInfoMsg.ProtoReflect.Descriptor instead.
func (*ContactInfoMsg) Descriptor() ([]byte, []int) {
	return file_user_management_user_management_service_proto_rawDescGZIP(), []int{24}
}

func (x *ContactInfoMsg) GetToken() *api_types.TokenInfos {
	if x != nil {
		return x.Token
	}
	return nil
}

func (x *ContactInfoMsg) GetContactInfo() *ContactInfo {
	if x != nil {
		return x.ContactInfo
	}
	return nil
}

type JWTRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *JWTRequest) Reset() {
	*x = JWTRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_management_user_management_service_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JWTRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JWTRequest) ProtoMessage() {}

func (x *JWTRequest) ProtoReflect() protoreflect.Message {
	mi := &file_user_management_user_management_service_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JWTRequest.ProtoReflect.Descriptor instead.
func (*JWTRequest) Descriptor() ([]byte, []int) {
	return file_user_management_user_management_service_proto_rawDescGZIP(), []int{25}
}

func (x *JWTRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type RefreshJWTRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RefreshToken string `protobuf:"bytes,1,opt,name=refresh_token,json=refreshToken,proto3" json:"refresh_token,omitempty"`
	AccessToken  string `protobuf:"bytes,2,opt,name=access_token,json=accessToken,proto3" json:"access_token,omitempty"`
}

func (x *RefreshJWTRequest) Reset() {
	*x = RefreshJWTRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_management_user_management_service_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefreshJWTRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefreshJWTRequest) ProtoMessage() {}

func (x *RefreshJWTRequest) ProtoReflect() protoreflect.Message {
	mi := &file_user_management_user_management_service_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefreshJWTRequest.ProtoReflect.Descriptor instead.
func (*RefreshJWTRequest) Descriptor() ([]byte, []int) {
	return file_user_management_user_management_service_proto_rawDescGZIP(), []int{26}
}

func (x *RefreshJWTRequest) GetRefreshToken() string {
	if x != nil {
		return x.RefreshToken
	}
	return ""
}

func (x *RefreshJWTRequest) GetAccessToken() string {
	if x != nil {
		return x.AccessToken
	}
	return ""
}

type CreateUserReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token             *api_types.TokenInfos `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	AccountId         string                `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	InitialPassword   string                `protobuf:"bytes,3,opt,name=initial_password,json=initialPassword,proto3" json:"initial_password,omitempty"`
	PreferredLanguage string                `protobuf:"bytes,4,opt,name=preferred_language,json=preferredLanguage,proto3" json:"preferred_language,omitempty"`
	Roles             []string              `protobuf:"bytes,5,rep,name=roles,proto3" json:"roles,omitempty"`
	Use_2Fa           bool                  `protobuf:"varint,6,opt,name=use_2fa,json=use2fa,proto3" json:"use_2fa,omitempty"`
	ProfileNames      []string              `protobuf:"bytes,7,rep,name=profile_names,json=profileNames,proto3" json:"profile_names,omitempty"` // Optional list of profiles that should be added for the user right at creation. First entry will be the main profiles name.
	// When migrating previous account, that should not be confirmed
	AccountConfirmedAt int64 `protobuf:"varint,8,opt,name=account_confirmed_at,json=accountConfirmedAt,proto3" json:"account_confirmed_at,omitempty"`
	CreatedAt          int64 `protobuf:"varint,9,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
}

func (x *CreateUserReq) Reset() {
	*x = CreateUserReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_management_user_management_service_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateUserReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateUserReq) ProtoMessage() {}

func (x *CreateUserReq) ProtoReflect() protoreflect.Message {
	mi := &file_user_management_user_management_service_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateUserReq.ProtoReflect.Descriptor instead.
func (*CreateUserReq) Descriptor() ([]byte, []int) {
	return file_user_management_user_management_service_proto_rawDescGZIP(), []int{27}
}

func (x *CreateUserReq) GetToken() *api_types.TokenInfos {
	if x != nil {
		return x.Token
	}
	return nil
}

func (x *CreateUserReq) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *CreateUserReq) GetInitialPassword() string {
	if x != nil {
		return x.InitialPassword
	}
	return ""
}

func (x *CreateUserReq) GetPreferredLanguage() string {
	if x != nil {
		return x.PreferredLanguage
	}
	return ""
}

func (x *CreateUserReq) GetRoles() []string {
	if x != nil {
		return x.Roles
	}
	return nil
}

func (x *CreateUserReq) GetUse_2Fa() bool {
	if x != nil {
		return x.Use_2Fa
	}
	return false
}

func (x *CreateUserReq) GetProfileNames() []string {
	if x != nil {
		return x.ProfileNames
	}
	return nil
}

func (x *CreateUserReq) GetAccountConfirmedAt() int64 {
	if x != nil {
		return x.AccountConfirmedAt
	}
	return 0
}

func (x *CreateUserReq) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

type RoleMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token     *api_types.TokenInfos `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	AccountId string                `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	Role      string                `protobuf:"bytes,3,opt,name=role,proto3" json:"role,omitempty"`
}

func (x *RoleMsg) Reset() {
	*x = RoleMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_management_user_management_service_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoleMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoleMsg) ProtoMessage() {}

func (x *RoleMsg) ProtoReflect() protoreflect.Message {
	mi := &file_user_management_user_management_service_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoleMsg.ProtoReflect.Descriptor instead.
func (*RoleMsg) Descriptor() ([]byte, []int) {
	return file_user_management_user_management_service_proto_rawDescGZIP(), []int{28}
}

func (x *RoleMsg) GetToken() *api_types.TokenInfos {
	if x != nil {
		return x.Token
	}
	return nil
}

func (x *RoleMsg) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *RoleMsg) GetRole() string {
	if x != nil {
		return x.Role
	}
	return ""
}

type StreamUsersMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstanceId string                  `protobuf:"bytes,1,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	Filters    *StreamUsersMsg_Filters `protobuf:"bytes,2,opt,name=filters,proto3" json:"filters,omitempty"`
}

func (x *StreamUsersMsg) Reset() {
	*x = StreamUsersMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_management_user_management_service_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamUsersMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamUsersMsg) ProtoMessage() {}

func (x *StreamUsersMsg) ProtoReflect() protoreflect.Message {
	mi := &file_user_management_user_management_service_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamUsersMsg.ProtoReflect.Descriptor instead.
func (*StreamUsersMsg) Descriptor() ([]byte, []int) {
	return file_user_management_user_management_service_proto_rawDescGZIP(), []int{29}
}

func (x *StreamUsersMsg) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *StreamUsersMsg) GetFilters() *StreamUsersMsg_Filters {
	if x != nil {
		return x.Filters
	}
	return nil
}

type FindNonParticipantUsersMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token *api_types.TokenInfos `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *FindNonParticipantUsersMsg) Reset() {
	*x = FindNonParticipantUsersMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_management_user_management_service_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindNonParticipantUsersMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindNonParticipantUsersMsg) ProtoMessage() {}

func (x *FindNonParticipantUsersMsg) ProtoReflect() protoreflect.Message {
	mi := &file_user_management_user_management_service_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindNonParticipantUsersMsg.ProtoReflect.Descriptor instead.
func (*FindNonParticipantUsersMsg) Descriptor() ([]byte, []int) {
	return file_user_management_user_management_service_proto_rawDescGZIP(), []int{30}
}

func (x *FindNonParticipantUsersMsg) GetToken() *api_types.TokenInfos {
	if x != nil {
		return x.Token
	}
	return nil
}

type UserListMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Users []*User `protobuf:"bytes,1,rep,name=users,proto3" json:"users,omitempty"`
}

func (x *UserListMsg) Reset() {
	*x = UserListMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_management_user_management_service_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserListMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserListMsg) ProtoMessage() {}

func (x *UserListMsg) ProtoReflect() protoreflect.Message {
	mi := &file_user_management_user_management_service_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserListMsg.ProtoReflect.Descriptor instead.
func (*UserListMsg) Descriptor() ([]byte, []int) {
	return file_user_management_user_management_service_proto_rawDescGZIP(), []int{31}
}

func (x *UserListMsg) GetUsers() []*User {
	if x != nil {
		return x.Users
	}
	return nil
}

type TempToken struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *TempToken) Reset() {
	*x = TempToken{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_management_user_management_service_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TempToken) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TempToken) ProtoMessage() {}

func (x *TempToken) ProtoReflect() protoreflect.Message {
	mi := &file_user_management_user_management_service_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TempToken.ProtoReflect.Descriptor instead.
func (*TempToken) Descriptor() ([]byte, []int) {
	return file_user_management_user_management_service_proto_rawDescGZIP(), []int{32}
}

func (x *TempToken) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type TokenResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccessToken       string     `protobuf:"bytes,1,opt,name=access_token,json=accessToken,proto3" json:"access_token,omitempty"`
	RefreshToken      string     `protobuf:"bytes,2,opt,name=refresh_token,json=refreshToken,proto3" json:"refresh_token,omitempty"`
	ExpiresIn         int32      `protobuf:"varint,3,opt,name=expires_in,json=expiresIn,proto3" json:"expires_in,omitempty"`
	Profiles          []*Profile `protobuf:"bytes,4,rep,name=profiles,proto3" json:"profiles,omitempty"`
	SelectedProfileId string     `protobuf:"bytes,5,opt,name=selected_profile_id,json=selectedProfileId,proto3" json:"selected_profile_id,omitempty"`
	PreferredLanguage string     `protobuf:"bytes,6,opt,name=preferred_language,json=preferredLanguage,proto3" json:"preferred_language,omitempty"`
	AccountConfirmed  bool       `protobuf:"varint,7,opt,name=account_confirmed,json=accountConfirmed,proto3" json:"account_confirmed,omitempty"`
}

func (x *TokenResponse) Reset() {
	*x = TokenResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_management_user_management_service_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TokenResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokenResponse) ProtoMessage() {}

func (x *TokenResponse) ProtoReflect() protoreflect.Message {
	mi := &file_user_management_user_management_service_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokenResponse.ProtoReflect.Descriptor instead.
func (*TokenResponse) Descriptor() ([]byte, []int) {
	return file_user_management_user_management_service_proto_rawDescGZIP(), []int{33}
}

func (x *TokenResponse) GetAccessToken() string {
	if x != nil {
		return x.AccessToken
	}
	return ""
}

func (x *TokenResponse) GetRefreshToken() string {
	if x != nil {
		return x.RefreshToken
	}
	return ""
}

func (x *TokenResponse) GetExpiresIn() int32 {
	if x != nil {
		return x.ExpiresIn
	}
	return 0
}

func (x *TokenResponse) GetProfiles() []*Profile {
	if x != nil {
		return x.Profiles
	}
	return nil
}

func (x *TokenResponse) GetSelectedProfileId() string {
	if x != nil {
		return x.SelectedProfileId
	}
	return ""
}

func (x *TokenResponse) GetPreferredLanguage() string {
	if x != nil {
		return x.PreferredLanguage
	}
	return ""
}

func (x *TokenResponse) GetAccountConfirmed() bool {
	if x != nil {
		return x.AccountConfirmed
	}
	return false
}

type StreamUsersMsg_Filters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UseReminderWeekdayFilter bool  `protobuf:"varint,1,opt,name=use_reminder_weekday_filter,json=useReminderWeekdayFilter,proto3" json:"use_reminder_weekday_filter,omitempty"`
	ReminderWeekday          int32 `protobuf:"varint,2,opt,name=reminder_weekday,json=reminderWeekday,proto3" json:"reminder_weekday,omitempty"`
	OnlyConfirmedAccounts    bool  `protobuf:"varint,3,opt,name=only_confirmed_accounts,json=onlyConfirmedAccounts,proto3" json:"only_confirmed_accounts,omitempty"`
}

func (x *StreamUsersMsg_Filters) Reset() {
	*x = StreamUsersMsg_Filters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_management_user_management_service_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamUsersMsg_Filters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamUsersMsg_Filters) ProtoMessage() {}

func (x *StreamUsersMsg_Filters) ProtoReflect() protoreflect.Message {
	mi := &file_user_management_user_management_service_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamUsersMsg_Filters.ProtoReflect.Descriptor instead.
func (*StreamUsersMsg_Filters) Descriptor() ([]byte, []int) {
	return file_user_management_user_management_service_proto_rawDescGZIP(), []int{29, 0}
}

func (x *StreamUsersMsg_Filters) GetUseReminderWeekdayFilter() bool {
	if x != nil {
		return x.UseReminderWeekdayFilter
	}
	return false
}

func (x *StreamUsersMsg_Filters) GetReminderWeekday() int32 {
	if x != nil {
		return x.ReminderWeekday
	}
	return 0
}

func (x *StreamUsersMsg_Filters) GetOnlyConfirmedAccounts() bool {
	if x != nil {
		return x.OnlyConfirmedAccounts
	}
	return false
}

var File_user_management_user_management_service_proto protoreflect.FileDescriptor

var file_user_management_user_management_service_proto_rawDesc = []byte{
	0x0a, 0x2d, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x20, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x70,
	0x69, 0x1a, 0x1a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x64, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xb8, 0x01, 0x0a, 0x0d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x53, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x3b, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61,
	0x6e, 0x65, 0x74, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x26, 0x0a, 0x0b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x10, 0x00,
	0x12, 0x0b, 0x0a, 0x07, 0x50, 0x52, 0x4f, 0x42, 0x4c, 0x45, 0x4d, 0x10, 0x01, 0x22, 0xf9, 0x01,
	0x0a, 0x12, 0x53, 0x69, 0x67, 0x6e, 0x75, 0x70, 0x57, 0x69, 0x74, 0x68, 0x45, 0x6d, 0x61, 0x69,
	0x6c, 0x4d, 0x73, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x12, 0x70, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x72, 0x65, 0x64, 0x5f, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x4c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x77, 0x61, 0x6e, 0x74, 0x73, 0x5f,
	0x6e, 0x65, 0x77, 0x73, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0f, 0x77, 0x61, 0x6e, 0x74, 0x73, 0x4e, 0x65, 0x77, 0x73, 0x6c, 0x65, 0x74, 0x74, 0x65,
	0x72, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x5f, 0x32, 0x66, 0x61, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x75, 0x73, 0x65, 0x32, 0x66, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6e,
	0x66, 0x6f, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x69, 0x6e, 0x66, 0x6f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x22, 0xba, 0x01, 0x0a, 0x11, 0x4c, 0x6f,
	0x67, 0x69, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x4d, 0x73, 0x67, 0x12,
	0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x73, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69,
	0x70, 0x61, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x61, 0x73, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x11, 0x76, 0x65, 0x72,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xb1, 0x01, 0x0a, 0x17, 0x4c, 0x6f, 0x67, 0x69, 0x6e,
	0x57, 0x69, 0x74, 0x68, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x44, 0x50, 0x4d,
	0x73, 0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6c,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x70,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x69, 0x64, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x53, 0x0a, 0x0f, 0x41, 0x75,
	0x74, 0x6f, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a,
	0x0a, 0x74, 0x65, 0x6d, 0x70, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x74, 0x65, 0x6d, 0x70, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x21, 0x0a, 0x0c,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22,
	0xa5, 0x01, 0x0a, 0x14, 0x41, 0x75, 0x74, 0x6f, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x76, 0x65, 0x72, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x73, 0x61, 0x6d, 0x65, 0x5f,
	0x75, 0x73, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x53, 0x61,
	0x6d, 0x65, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x22, 0x6c, 0x0a, 0x17, 0x53, 0x65, 0x6e, 0x64, 0x56,
	0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x52,
	0x65, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x49, 0x64, 0x22, 0xac, 0x01, 0x0a, 0x0d, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e,
	0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x22,
	0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x69,
	0x6e, 0x66, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73,
	0x65, 0x72, 0x12, 0x30, 0x0a, 0x14, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x5f, 0x66, 0x61, 0x63,
	0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x65, 0x65, 0x64, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x12, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x4e, 0x65,
	0x65, 0x64, 0x65, 0x64, 0x22, 0x80, 0x01, 0x0a, 0x0d, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x35, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a,
	0x61, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x17, 0x0a,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x22, 0x4f, 0x0a, 0x16, 0x52, 0x65, 0x76, 0x6f, 0x6b,
	0x65, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x52, 0x65,
	0x71, 0x12, 0x35, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x6e, 0x66, 0x6f,
	0x73, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x74, 0x0a, 0x13, 0x52, 0x65, 0x66, 0x72,
	0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x66,
	0x72, 0x65, 0x73, 0x68, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x27,
	0x0a, 0x0f, 0x41, 0x70, 0x70, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x32, 0x0a, 0x12, 0x41, 0x70, 0x70, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a,
	0x09, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x09, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x22, 0x74, 0x0a, 0x0e, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x35, 0x0a,
	0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x69,
	0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x64, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x52, 0x05, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x2b, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x69, 0x6e, 0x66, 0x2e, 0x75, 0x73, 0x65, 0x72,
	0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x22, 0xc6, 0x02, 0x0a, 0x0c, 0x55, 0x73, 0x65, 0x72, 0x41, 0x75, 0x74, 0x68, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x72,
	0x6f, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x72, 0x6f, 0x6c, 0x65,
	0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x2d, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x69, 0x6e, 0x66, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73,
	0x12, 0x3c, 0x0a, 0x10, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x69, 0x6e, 0x66,
	0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x0f, 0x73,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x2b,
	0x0a, 0x11, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72,
	0x6d, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x12, 0x2d, 0x0a, 0x12, 0x70,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x5f, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72,
	0x65, 0x64, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x22, 0x83, 0x01, 0x0a, 0x1c, 0x52,
	0x65, 0x73, 0x65, 0x6e, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x56, 0x65, 0x72, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x35, 0x0a, 0x05, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x69, 0x6e, 0x66,
	0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x52, 0x05, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x22, 0x90, 0x01, 0x0a, 0x11, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x4d, 0x73, 0x67, 0x12, 0x35, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a,
	0x61, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x21, 0x0a,
	0x0c, 0x6f, 0x6c, 0x64, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x6c, 0x64, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x65, 0x77, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6e, 0x65, 0x77, 0x50, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x22, 0x5a, 0x0a, 0x18, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x65, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x4d, 0x73, 0x67, 0x12,
	0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x22,
	0x33, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x46, 0x6f, 0x72, 0x52, 0x65,
	0x73, 0x65, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x4d, 0x73, 0x67, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x33, 0x0a, 0x12, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x46, 0x6f, 0x72, 0x50, 0x57, 0x52, 0x65, 0x73, 0x65, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x4b, 0x0a, 0x10, 0x52, 0x65, 0x73,
	0x65, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x4d, 0x73, 0x67, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x65, 0x77, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6e, 0x65, 0x77, 0x50, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0xa6, 0x01, 0x0a, 0x0e, 0x45, 0x6d, 0x61, 0x69, 0x6c,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x73, 0x67, 0x12, 0x35, 0x0a, 0x05, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75,
	0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x65, 0x77, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x65, 0x77, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x24, 0x0a,
	0x0e, 0x6b, 0x65, 0x65, 0x70, 0x5f, 0x6f, 0x6c, 0x64, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x6b, 0x65, 0x65, 0x70, 0x4f, 0x6c, 0x64, 0x45, 0x6d,
	0x61, 0x69, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22,
	0x6f, 0x0a, 0x11, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x4d, 0x73, 0x67, 0x12, 0x35, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e,
	0x65, 0x74, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49,
	0x6e, 0x66, 0x6f, 0x73, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x6c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65,
	0x22, 0x9d, 0x01, 0x0a, 0x15, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x50, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x4d, 0x73, 0x67, 0x12, 0x35, 0x0a, 0x05, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x69, 0x6e, 0x66, 0x6c,
	0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0x4d, 0x0a, 0x13, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x70, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x69, 0x6e, 0x66, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x12, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73,
	0x22, 0x81, 0x01, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x4d, 0x73, 0x67, 0x12, 0x35, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65,
	0x74, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x6e,
	0x66, 0x6f, 0x73, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x38, 0x0a, 0x0c, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x69, 0x6e, 0x66, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x22, 0x22, 0x0a, 0x0a, 0x4a, 0x57, 0x54, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x5b, 0x0a, 0x11, 0x52, 0x65, 0x66, 0x72,
	0x65, 0x73, 0x68, 0x4a, 0x57, 0x54, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a,
	0x0d, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xe4, 0x02, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x35, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e,
	0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1d,
	0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x29, 0x0a,
	0x10, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c,
	0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x2d, 0x0a, 0x12, 0x70, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x72, 0x65, 0x64, 0x5f, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x4c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x12, 0x17, 0x0a,
	0x07, 0x75, 0x73, 0x65, 0x5f, 0x32, 0x66, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x32, 0x66, 0x61, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x70,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x73, 0x0a, 0x07,
	0x52, 0x6f, 0x6c, 0x65, 0x4d, 0x73, 0x67, 0x12, 0x35, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e,
	0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1d,
	0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x6f, 0x6c,
	0x65, 0x22, 0xb3, 0x02, 0x0a, 0x0e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x55, 0x73, 0x65, 0x72,
	0x73, 0x4d, 0x73, 0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x52, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e,
	0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x55, 0x73, 0x65, 0x72, 0x73, 0x4d, 0x73, 0x67, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73,
	0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x1a, 0xab, 0x01, 0x0a, 0x07, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x3d, 0x0a, 0x1b, 0x75, 0x73, 0x65, 0x5f, 0x72, 0x65, 0x6d,
	0x69, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x77, 0x65, 0x65, 0x6b, 0x64, 0x61, 0x79, 0x5f, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x75, 0x73, 0x65, 0x52,
	0x65, 0x6d, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x57, 0x65, 0x65, 0x6b, 0x64, 0x61, 0x79, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x65, 0x72,
	0x5f, 0x77, 0x65, 0x65, 0x6b, 0x64, 0x61, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f,
	0x72, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x57, 0x65, 0x65, 0x6b, 0x64, 0x61, 0x79, 0x12,
	0x36, 0x0a, 0x17, 0x6f, 0x6e, 0x6c, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65,
	0x64, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x15, 0x6f, 0x6e, 0x6c, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x22, 0x53, 0x0a, 0x1a, 0x46, 0x69, 0x6e, 0x64, 0x4e,
	0x6f, 0x6e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x73, 0x4d, 0x73, 0x67, 0x12, 0x35, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61,
	0x6e, 0x65, 0x74, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x73, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x33, 0x0a, 0x0b,
	0x55, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x73, 0x67, 0x12, 0x24, 0x0a, 0x05, 0x75,
	0x73, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x69, 0x6e, 0x66,
	0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x05, 0x75, 0x73, 0x65, 0x72,
	0x73, 0x22, 0x21, 0x0a, 0x09, 0x54, 0x65, 0x6d, 0x70, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xb1, 0x02, 0x0a, 0x0d, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x66,
	0x72, 0x65, 0x73, 0x68, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1d,
	0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x5f, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x49, 0x6e, 0x12, 0x2d, 0x0a,
	0x08, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x69, 0x6e, 0x66, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x13,
	0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x73, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x12,
	0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x5f, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x72, 0x65, 0x64, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x32, 0x82, 0x1e, 0x0a, 0x11, 0x55, 0x73, 0x65,
	0x72, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x70, 0x69, 0x12, 0x51,
	0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x1a, 0x2f, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x82, 0x01, 0x0a, 0x14, 0x53, 0x65, 0x6e, 0x64, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x39, 0x2e, 0x69, 0x6e, 0x66,
	0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x65,
	0x6e, 0x64, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x64, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x2f, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a,
	0x61, 0x6e, 0x65, 0x74, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x82, 0x01, 0x0a, 0x15, 0x41, 0x75, 0x74, 0x6f, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x12, 0x31, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x1a, 0x36, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e,
	0x65, 0x74, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x56, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x76, 0x0a, 0x0e, 0x4c,
	0x6f, 0x67, 0x69, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x33, 0x2e,
	0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x4d,
	0x73, 0x67, 0x1a, 0x2f, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65,
	0x74, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x82, 0x01, 0x0a, 0x14, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x57, 0x69, 0x74,
	0x68, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x44, 0x50, 0x12, 0x39, 0x2e, 0x69,
	0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x49, 0x44, 0x50, 0x4d, 0x73, 0x67, 0x1a, 0x2f, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65,
	0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x78, 0x0a, 0x0f, 0x53, 0x69, 0x67, 0x6e,
	0x75, 0x70, 0x57, 0x69, 0x74, 0x68, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x34, 0x2e, 0x69, 0x6e,
	0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x53,
	0x69, 0x67, 0x6e, 0x75, 0x70, 0x57, 0x69, 0x74, 0x68, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x4d, 0x73,
	0x67, 0x1a, 0x2f, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74,
	0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x5c, 0x0a, 0x0b, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x4a, 0x57,
	0x54, 0x12, 0x2c, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74,
	0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x4a, 0x57, 0x54, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1f, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x73,
	0x12, 0x70, 0x0a, 0x08, 0x52, 0x65, 0x6e, 0x65, 0x77, 0x4a, 0x57, 0x54, 0x12, 0x33, 0x2e, 0x69,
	0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x4a, 0x57, 0x54, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2f, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74,
	0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x83, 0x01, 0x0a, 0x16, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x41, 0x6c, 0x6c,
	0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x12, 0x38, 0x2e,
	0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x2f, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65,
	0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x4c, 0x0a, 0x0d, 0x56, 0x65, 0x72, 0x69,
	0x66, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x2b, 0x2e, 0x69, 0x6e, 0x66, 0x6c,
	0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x54, 0x65, 0x6d,
	0x70, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x1a, 0x0e, 0x2e, 0x69, 0x6e, 0x66, 0x2e, 0x75, 0x73, 0x65,
	0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x12, 0x8c, 0x01, 0x0a, 0x19, 0x52, 0x65, 0x73, 0x65, 0x6e,
	0x64, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3e, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61,
	0x6e, 0x65, 0x74, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x6e, 0x64, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x1a, 0x2f, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61,
	0x6e, 0x65, 0x74, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x7b, 0x0a, 0x10, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x41, 0x70, 0x70, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x31, 0x2e, 0x69, 0x6e, 0x66, 0x6c,
	0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x70, 0x70,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x69,
	0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x41, 0x70, 0x70, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x67, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x65, 0x6d, 0x70, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x22, 0x2e, 0x69, 0x6e, 0x66,
	0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x2e, 0x54, 0x65, 0x6d, 0x70, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x2b,
	0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x64, 0x0a, 0x11, 0x47,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x12, 0x22, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x2b, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61,
	0x6e, 0x65, 0x74, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0x58, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x73, 0x12, 0x22, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65,
	0x74, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x23, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e,
	0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x54, 0x65, 0x6d,
	0x70, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x6f, 0x0a, 0x0f, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x2b,
	0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x1a, 0x2f, 0x2e, 0x69, 0x6e,
	0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x6a, 0x0a, 0x13,
	0x50, 0x75, 0x72, 0x67, 0x65, 0x55, 0x73, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x73, 0x12, 0x22, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e,
	0x65, 0x74, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x2f, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65,
	0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x4a, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x12, 0x2f, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e,
	0x65, 0x74, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x1a, 0x0e, 0x2e, 0x69, 0x6e, 0x66, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x12, 0x76, 0x0a, 0x0e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x33, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e,
	0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x73, 0x67, 0x1a, 0x2f, 0x2e, 0x69, 0x6e,
	0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x58, 0x0a, 0x14,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x45,
	0x6d, 0x61, 0x69, 0x6c, 0x12, 0x30, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61,
	0x6e, 0x65, 0x74, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x4d, 0x73, 0x67, 0x1a, 0x0e, 0x2e, 0x69, 0x6e, 0x66, 0x2e, 0x75, 0x73, 0x65,
	0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x12, 0x71, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2f, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65,
	0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x1a, 0x2f, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75,
	0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x5e, 0x0a, 0x17, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x4c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x12, 0x33, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61,
	0x6e, 0x65, 0x74, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x73, 0x67, 0x1a, 0x0e, 0x2e, 0x69, 0x6e, 0x66, 0x2e,
	0x75, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x12, 0x84, 0x01, 0x0a, 0x15, 0x49, 0x6e,
	0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65,
	0x73, 0x65, 0x74, 0x12, 0x3a, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e,
	0x65, 0x74, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x65, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x4d, 0x73, 0x67, 0x1a,
	0x2f, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x8f, 0x01, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x46, 0x6f, 0x72,
	0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x65, 0x74, 0x12, 0x3d, 0x2e,
	0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x46, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x65,
	0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x4d, 0x73, 0x67, 0x1a, 0x34, 0x2e, 0x69,
	0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x46, 0x6f, 0x72, 0x50, 0x57, 0x52, 0x65, 0x73,
	0x65, 0x74, 0x12, 0x74, 0x0a, 0x0d, 0x52, 0x65, 0x73, 0x65, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x12, 0x32, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e,
	0x65, 0x74, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x74, 0x50, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x4d, 0x73, 0x67, 0x1a, 0x2f, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65,
	0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x4f, 0x0a, 0x0b, 0x53, 0x61, 0x76, 0x65,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x30, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65,
	0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x69, 0x6e, 0x66, 0x2e,
	0x75, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x12, 0x51, 0x0a, 0x0d, 0x52, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x30, 0x2e, 0x69, 0x6e, 0x66,
	0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x69,
	0x6e, 0x66, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x12, 0x73, 0x0a, 0x13,
	0x55, 0x73, 0x65, 0x55, 0x6e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x12, 0x2b, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e,
	0x65, 0x74, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x1a, 0x2f, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x63, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x37, 0x2e,
	0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x73, 0x4d, 0x73, 0x67, 0x1a, 0x0e, 0x2e, 0x69, 0x6e, 0x66, 0x2e, 0x75, 0x73, 0x65,
	0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x12, 0x4c, 0x0a, 0x08, 0x41, 0x64, 0x64, 0x45, 0x6d, 0x61,
	0x69, 0x6c, 0x12, 0x30, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65,
	0x74, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x4d, 0x73, 0x67, 0x1a, 0x0e, 0x2e, 0x69, 0x6e, 0x66, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x12, 0x4f, 0x0a, 0x0b, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x45, 0x6d,
	0x61, 0x69, 0x6c, 0x12, 0x30, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e,
	0x65, 0x74, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x4d, 0x73, 0x67, 0x1a, 0x0e, 0x2e, 0x69, 0x6e, 0x66, 0x2e, 0x75, 0x73, 0x65, 0x72,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x12, 0x4d, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55,
	0x73, 0x65, 0x72, 0x12, 0x2f, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e,
	0x65, 0x74, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x1a, 0x0e, 0x2e, 0x69, 0x6e, 0x66, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x12, 0x4b, 0x0a, 0x0e, 0x41, 0x64, 0x64, 0x52, 0x6f, 0x6c, 0x65, 0x46,
	0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x12, 0x29, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e,
	0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x4d, 0x73,
	0x67, 0x1a, 0x0e, 0x2e, 0x69, 0x6e, 0x66, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x12, 0x4e, 0x0a, 0x11, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x46,
	0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x12, 0x29, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e,
	0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x4d, 0x73,
	0x67, 0x1a, 0x0e, 0x2e, 0x69, 0x6e, 0x66, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x12, 0x86, 0x01, 0x0a, 0x17, 0x46, 0x69, 0x6e, 0x64, 0x4e, 0x6f, 0x6e, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x3c, 0x2e,
	0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x46, 0x69, 0x6e, 0x64, 0x4e, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70,
	0x61, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x4d, 0x73, 0x67, 0x1a, 0x2d, 0x2e, 0x69, 0x6e,
	0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x73, 0x67, 0x12, 0x51, 0x0a, 0x0b, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x30, 0x2e, 0x69, 0x6e, 0x66, 0x6c,
	0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x73, 0x4d, 0x73, 0x67, 0x1a, 0x0e, 0x2e, 0x69, 0x6e,
	0x66, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x30, 0x01, 0x42, 0x39, 0x5a,
	0x37, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x69, 0x6e, 0x66, 0x6c,
	0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2d, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x61, 0x70, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_user_management_user_management_service_proto_rawDescOnce sync.Once
	file_user_management_user_management_service_proto_rawDescData = file_user_management_user_management_service_proto_rawDesc
)

func file_user_management_user_management_service_proto_rawDescGZIP() []byte {
	file_user_management_user_management_service_proto_rawDescOnce.Do(func() {
		file_user_management_user_management_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_user_management_user_management_service_proto_rawDescData)
	})
	return file_user_management_user_management_service_proto_rawDescData
}

var file_user_management_user_management_service_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_user_management_user_management_service_proto_msgTypes = make([]protoimpl.MessageInfo, 35)
var file_user_management_user_management_service_proto_goTypes = []interface{}{
	(ServiceStatus_StatusValue)(0),       // 0: influenzanet.user_management_api.ServiceStatus.StatusValue
	(*ServiceStatus)(nil),                // 1: influenzanet.user_management_api.ServiceStatus
	(*SignupWithEmailMsg)(nil),           // 2: influenzanet.user_management_api.SignupWithEmailMsg
	(*LoginWithEmailMsg)(nil),            // 3: influenzanet.user_management_api.LoginWithEmailMsg
	(*LoginWithExternalIDPMsg)(nil),      // 4: influenzanet.user_management_api.LoginWithExternalIDPMsg
	(*AutoValidateReq)(nil),              // 5: influenzanet.user_management_api.AutoValidateReq
	(*AutoValidateResponse)(nil),         // 6: influenzanet.user_management_api.AutoValidateResponse
	(*SendVerificationCodeReq)(nil),      // 7: influenzanet.user_management_api.SendVerificationCodeReq
	(*LoginResponse)(nil),                // 8: influenzanet.user_management_api.LoginResponse
	(*UserReference)(nil),                // 9: influenzanet.user_management_api.UserReference
	(*RevokeRefreshTokensReq)(nil),       // 10: influenzanet.user_management_api.RevokeRefreshTokensReq
	(*RefreshTokenRequest)(nil),          // 11: influenzanet.user_management_api.RefreshTokenRequest
	(*AppTokenRequest)(nil),              // 12: influenzanet.user_management_api.AppTokenRequest
	(*AppTokenValidation)(nil),           // 13: influenzanet.user_management_api.AppTokenValidation
	(*ProfileRequest)(nil),               // 14: influenzanet.user_management_api.ProfileRequest
	(*UserAuthInfo)(nil),                 // 15: influenzanet.user_management_api.UserAuthInfo
	(*ResendContactVerificationReq)(nil), // 16: influenzanet.user_management_api.ResendContactVerificationReq
	(*PasswordChangeMsg)(nil),            // 17: influenzanet.user_management_api.PasswordChangeMsg
	(*InitiateResetPasswordMsg)(nil),     // 18: influenzanet.user_management_api.InitiateResetPasswordMsg
	(*GetInfosForResetPasswordMsg)(nil),  // 19: influenzanet.user_management_api.GetInfosForResetPasswordMsg
	(*UserInfoForPWReset)(nil),           // 20: influenzanet.user_management_api.UserInfoForPWReset
	(*ResetPasswordMsg)(nil),             // 21: influenzanet.user_management_api.ResetPasswordMsg
	(*EmailChangeMsg)(nil),               // 22: influenzanet.user_management_api.EmailChangeMsg
	(*LanguageChangeMsg)(nil),            // 23: influenzanet.user_management_api.LanguageChangeMsg
	(*ContactPreferencesMsg)(nil),        // 24: influenzanet.user_management_api.ContactPreferencesMsg
	(*ContactInfoMsg)(nil),               // 25: influenzanet.user_management_api.ContactInfoMsg
	(*JWTRequest)(nil),                   // 26: influenzanet.user_management_api.JWTRequest
	(*RefreshJWTRequest)(nil),            // 27: influenzanet.user_management_api.RefreshJWTRequest
	(*CreateUserReq)(nil),                // 28: influenzanet.user_management_api.CreateUserReq
	(*RoleMsg)(nil),                      // 29: influenzanet.user_management_api.RoleMsg
	(*StreamUsersMsg)(nil),               // 30: influenzanet.user_management_api.StreamUsersMsg
	(*FindNonParticipantUsersMsg)(nil),   // 31: influenzanet.user_management_api.FindNonParticipantUsersMsg
	(*UserListMsg)(nil),                  // 32: influenzanet.user_management_api.UserListMsg
	(*TempToken)(nil),                    // 33: influenzanet.user_management_api.TempToken
	(*TokenResponse)(nil),                // 34: influenzanet.user_management_api.TokenResponse
	(*StreamUsersMsg_Filters)(nil),       // 35: influenzanet.user_management_api.StreamUsersMsg.Filters
	(*User)(nil),                         // 36: inf.user.User
	(*api_types.TokenInfos)(nil),         // 37: influenzanet.shared.TokenInfos
	(*Profile)(nil),                      // 38: inf.user.Profile
	(*ContactPreferences)(nil),           // 39: inf.user.ContactPreferences
	(*ContactInfo)(nil),                  // 40: inf.user.ContactInfo
	(*emptypb.Empty)(nil),                // 41: google.protobuf.Empty
	(*api_types.TempTokenInfo)(nil),      // 42: influenzanet.shared.TempTokenInfo
	(*api_types.TempTokenInfos)(nil),     // 43: influenzanet.shared.TempTokenInfos
}
var file_user_management_user_management_service_proto_depIdxs = []int32{
	0,  // 0: influenzanet.user_management_api.ServiceStatus.status:type_name -> influenzanet.user_management_api.ServiceStatus.StatusValue
	34, // 1: influenzanet.user_management_api.LoginResponse.token:type_name -> influenzanet.user_management_api.TokenResponse
	36, // 2: influenzanet.user_management_api.LoginResponse.user:type_name -> inf.user.User
	37, // 3: influenzanet.user_management_api.UserReference.token:type_name -> influenzanet.shared.TokenInfos
	37, // 4: influenzanet.user_management_api.RevokeRefreshTokensReq.token:type_name -> influenzanet.shared.TokenInfos
	37, // 5: influenzanet.user_management_api.ProfileRequest.token:type_name -> influenzanet.shared.TokenInfos
	38, // 6: influenzanet.user_management_api.ProfileRequest.profile:type_name -> inf.user.Profile
	38, // 7: influenzanet.user_management_api.UserAuthInfo.profiles:type_name -> inf.user.Profile
	38, // 8: influenzanet.user_management_api.UserAuthInfo.selected_profile:type_name -> inf.user.Profile
	37, // 9: influenzanet.user_management_api.ResendContactVerificationReq.token:type_name -> influenzanet.shared.TokenInfos
	37, // 10: influenzanet.user_management_api.PasswordChangeMsg.token:type_name -> influenzanet.shared.TokenInfos
	37, // 11: influenzanet.user_management_api.EmailChangeMsg.token:type_name -> influenzanet.shared.TokenInfos
	37, // 12: influenzanet.user_management_api.LanguageChangeMsg.token:type_name -> influenzanet.shared.TokenInfos
	37, // 13: influenzanet.user_management_api.ContactPreferencesMsg.token:type_name -> influenzanet.shared.TokenInfos
	39, // 14: influenzanet.user_management_api.ContactPreferencesMsg.contact_preferences:type_name -> inf.user.ContactPreferences
	37, // 15: influenzanet.user_management_api.ContactInfoMsg.token:type_name -> influenzanet.shared.TokenInfos
	40, // 16: influenzanet.user_management_api.ContactInfoMsg.contact_info:type_name -> inf.user.ContactInfo
	37, // 17: influenzanet.user_management_api.CreateUserReq.token:type_name -> influenzanet.shared.TokenInfos
	37, // 18: influenzanet.user_management_api.RoleMsg.token:type_name -> influenzanet.shared.TokenInfos
	35, // 19: influenzanet.user_management_api.StreamUsersMsg.filters:type_name -> influenzanet.user_management_api.StreamUsersMsg.Filters
	37, // 20: influenzanet.user_management_api.FindNonParticipantUsersMsg.token:type_name -> influenzanet.shared.TokenInfos
	36, // 21: influenzanet.user_management_api.UserListMsg.users:type_name -> inf.user.User
	38, // 22: influenzanet.user_management_api.TokenResponse.profiles:type_name -> inf.user.Profile
	41, // 23: influenzanet.user_management_api.UserManagementApi.Status:input_type -> google.protobuf.Empty
	7,  // 24: influenzanet.user_management_api.UserManagementApi.SendVerificationCode:input_type -> influenzanet.user_management_api.SendVerificationCodeReq
	5,  // 25: influenzanet.user_management_api.UserManagementApi.AutoValidateTempToken:input_type -> influenzanet.user_management_api.AutoValidateReq
	3,  // 26: influenzanet.user_management_api.UserManagementApi.LoginWithEmail:input_type -> influenzanet.user_management_api.LoginWithEmailMsg
	4,  // 27: influenzanet.user_management_api.UserManagementApi.LoginWithExternalIDP:input_type -> influenzanet.user_management_api.LoginWithExternalIDPMsg
	2,  // 28: influenzanet.user_management_api.UserManagementApi.SignupWithEmail:input_type -> influenzanet.user_management_api.SignupWithEmailMsg
	26, // 29: influenzanet.user_management_api.UserManagementApi.ValidateJWT:input_type -> influenzanet.user_management_api.JWTRequest
	27, // 30: influenzanet.user_management_api.UserManagementApi.RenewJWT:input_type -> influenzanet.user_management_api.RefreshJWTRequest
	10, // 31: influenzanet.user_management_api.UserManagementApi.RevokeAllRefreshTokens:input_type -> influenzanet.user_management_api.RevokeRefreshTokensReq
	33, // 32: influenzanet.user_management_api.UserManagementApi.VerifyContact:input_type -> influenzanet.user_management_api.TempToken
	16, // 33: influenzanet.user_management_api.UserManagementApi.ResendContactVerification:input_type -> influenzanet.user_management_api.ResendContactVerificationReq
	12, // 34: influenzanet.user_management_api.UserManagementApi.ValidateAppToken:input_type -> influenzanet.user_management_api.AppTokenRequest
	42, // 35: influenzanet.user_management_api.UserManagementApi.GetOrCreateTemptoken:input_type -> influenzanet.shared.TempTokenInfo
	42, // 36: influenzanet.user_management_api.UserManagementApi.GenerateTempToken:input_type -> influenzanet.shared.TempTokenInfo
	42, // 37: influenzanet.user_management_api.UserManagementApi.GetTempTokens:input_type -> influenzanet.shared.TempTokenInfo
	33, // 38: influenzanet.user_management_api.UserManagementApi.DeleteTempToken:input_type -> influenzanet.user_management_api.TempToken
	42, // 39: influenzanet.user_management_api.UserManagementApi.PurgeUserTempTokens:input_type -> influenzanet.shared.TempTokenInfo
	9,  // 40: influenzanet.user_management_api.UserManagementApi.GetUser:input_type -> influenzanet.user_management_api.UserReference
	17, // 41: influenzanet.user_management_api.UserManagementApi.ChangePassword:input_type -> influenzanet.user_management_api.PasswordChangeMsg
	22, // 42: influenzanet.user_management_api.UserManagementApi.ChangeAccountIDEmail:input_type -> influenzanet.user_management_api.EmailChangeMsg
	9,  // 43: influenzanet.user_management_api.UserManagementApi.DeleteAccount:input_type -> influenzanet.user_management_api.UserReference
	23, // 44: influenzanet.user_management_api.UserManagementApi.ChangePreferredLanguage:input_type -> influenzanet.user_management_api.LanguageChangeMsg
	18, // 45: influenzanet.user_management_api.UserManagementApi.InitiatePasswordReset:input_type -> influenzanet.user_management_api.InitiateResetPasswordMsg
	19, // 46: influenzanet.user_management_api.UserManagementApi.GetInfosForPasswordReset:input_type -> influenzanet.user_management_api.GetInfosForResetPasswordMsg
	21, // 47: influenzanet.user_management_api.UserManagementApi.ResetPassword:input_type -> influenzanet.user_management_api.ResetPasswordMsg
	14, // 48: influenzanet.user_management_api.UserManagementApi.SaveProfile:input_type -> influenzanet.user_management_api.ProfileRequest
	14, // 49: influenzanet.user_management_api.UserManagementApi.RemoveProfile:input_type -> influenzanet.user_management_api.ProfileRequest
	33, // 50: influenzanet.user_management_api.UserManagementApi.UseUnsubscribeToken:input_type -> influenzanet.user_management_api.TempToken
	24, // 51: influenzanet.user_management_api.UserManagementApi.UpdateContactPreferences:input_type -> influenzanet.user_management_api.ContactPreferencesMsg
	25, // 52: influenzanet.user_management_api.UserManagementApi.AddEmail:input_type -> influenzanet.user_management_api.ContactInfoMsg
	25, // 53: influenzanet.user_management_api.UserManagementApi.RemoveEmail:input_type -> influenzanet.user_management_api.ContactInfoMsg
	28, // 54: influenzanet.user_management_api.UserManagementApi.CreateUser:input_type -> influenzanet.user_management_api.CreateUserReq
	29, // 55: influenzanet.user_management_api.UserManagementApi.AddRoleForUser:input_type -> influenzanet.user_management_api.RoleMsg
	29, // 56: influenzanet.user_management_api.UserManagementApi.RemoveRoleForUser:input_type -> influenzanet.user_management_api.RoleMsg
	31, // 57: influenzanet.user_management_api.UserManagementApi.FindNonParticipantUsers:input_type -> influenzanet.user_management_api.FindNonParticipantUsersMsg
	30, // 58: influenzanet.user_management_api.UserManagementApi.StreamUsers:input_type -> influenzanet.user_management_api.StreamUsersMsg
	1,  // 59: influenzanet.user_management_api.UserManagementApi.Status:output_type -> influenzanet.user_management_api.ServiceStatus
	1,  // 60: influenzanet.user_management_api.UserManagementApi.SendVerificationCode:output_type -> influenzanet.user_management_api.ServiceStatus
	6,  // 61: influenzanet.user_management_api.UserManagementApi.AutoValidateTempToken:output_type -> influenzanet.user_management_api.AutoValidateResponse
	8,  // 62: influenzanet.user_management_api.UserManagementApi.LoginWithEmail:output_type -> influenzanet.user_management_api.LoginResponse
	8,  // 63: influenzanet.user_management_api.UserManagementApi.LoginWithExternalIDP:output_type -> influenzanet.user_management_api.LoginResponse
	34, // 64: influenzanet.user_management_api.UserManagementApi.SignupWithEmail:output_type -> influenzanet.user_management_api.TokenResponse
	37, // 65: influenzanet.user_management_api.UserManagementApi.ValidateJWT:output_type -> influenzanet.shared.TokenInfos
	34, // 66: influenzanet.user_management_api.UserManagementApi.RenewJWT:output_type -> influenzanet.user_management_api.TokenResponse
	1,  // 67: influenzanet.user_management_api.UserManagementApi.RevokeAllRefreshTokens:output_type -> influenzanet.user_management_api.ServiceStatus
	36, // 68: influenzanet.user_management_api.UserManagementApi.VerifyContact:output_type -> inf.user.User
	1,  // 69: influenzanet.user_management_api.UserManagementApi.ResendContactVerification:output_type -> influenzanet.user_management_api.ServiceStatus
	13, // 70: influenzanet.user_management_api.UserManagementApi.ValidateAppToken:output_type -> influenzanet.user_management_api.AppTokenValidation
	33, // 71: influenzanet.user_management_api.UserManagementApi.GetOrCreateTemptoken:output_type -> influenzanet.user_management_api.TempToken
	33, // 72: influenzanet.user_management_api.UserManagementApi.GenerateTempToken:output_type -> influenzanet.user_management_api.TempToken
	43, // 73: influenzanet.user_management_api.UserManagementApi.GetTempTokens:output_type -> influenzanet.shared.TempTokenInfos
	1,  // 74: influenzanet.user_management_api.UserManagementApi.DeleteTempToken:output_type -> influenzanet.user_management_api.ServiceStatus
	1,  // 75: influenzanet.user_management_api.UserManagementApi.PurgeUserTempTokens:output_type -> influenzanet.user_management_api.ServiceStatus
	36, // 76: influenzanet.user_management_api.UserManagementApi.GetUser:output_type -> inf.user.User
	1,  // 77: influenzanet.user_management_api.UserManagementApi.ChangePassword:output_type -> influenzanet.user_management_api.ServiceStatus
	36, // 78: influenzanet.user_management_api.UserManagementApi.ChangeAccountIDEmail:output_type -> inf.user.User
	1,  // 79: influenzanet.user_management_api.UserManagementApi.DeleteAccount:output_type -> influenzanet.user_management_api.ServiceStatus
	36, // 80: influenzanet.user_management_api.UserManagementApi.ChangePreferredLanguage:output_type -> inf.user.User
	1,  // 81: influenzanet.user_management_api.UserManagementApi.InitiatePasswordReset:output_type -> influenzanet.user_management_api.ServiceStatus
	20, // 82: influenzanet.user_management_api.UserManagementApi.GetInfosForPasswordReset:output_type -> influenzanet.user_management_api.UserInfoForPWReset
	1,  // 83: influenzanet.user_management_api.UserManagementApi.ResetPassword:output_type -> influenzanet.user_management_api.ServiceStatus
	36, // 84: influenzanet.user_management_api.UserManagementApi.SaveProfile:output_type -> inf.user.User
	36, // 85: influenzanet.user_management_api.UserManagementApi.RemoveProfile:output_type -> inf.user.User
	1,  // 86: influenzanet.user_management_api.UserManagementApi.UseUnsubscribeToken:output_type -> influenzanet.user_management_api.ServiceStatus
	36, // 87: influenzanet.user_management_api.UserManagementApi.UpdateContactPreferences:output_type -> inf.user.User
	36, // 88: influenzanet.user_management_api.UserManagementApi.AddEmail:output_type -> inf.user.User
	36, // 89: influenzanet.user_management_api.UserManagementApi.RemoveEmail:output_type -> inf.user.User
	36, // 90: influenzanet.user_management_api.UserManagementApi.CreateUser:output_type -> inf.user.User
	36, // 91: influenzanet.user_management_api.UserManagementApi.AddRoleForUser:output_type -> inf.user.User
	36, // 92: influenzanet.user_management_api.UserManagementApi.RemoveRoleForUser:output_type -> inf.user.User
	32, // 93: influenzanet.user_management_api.UserManagementApi.FindNonParticipantUsers:output_type -> influenzanet.user_management_api.UserListMsg
	36, // 94: influenzanet.user_management_api.UserManagementApi.StreamUsers:output_type -> inf.user.User
	59, // [59:95] is the sub-list for method output_type
	23, // [23:59] is the sub-list for method input_type
	23, // [23:23] is the sub-list for extension type_name
	23, // [23:23] is the sub-list for extension extendee
	0,  // [0:23] is the sub-list for field type_name
}

func init() { file_user_management_user_management_service_proto_init() }
func file_user_management_user_management_service_proto_init() {
	if File_user_management_user_management_service_proto != nil {
		return
	}
	file_user_management_user_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_user_management_user_management_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_management_user_management_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignupWithEmailMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_management_user_management_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoginWithEmailMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_management_user_management_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoginWithExternalIDPMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_management_user_management_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AutoValidateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_management_user_management_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AutoValidateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_management_user_management_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendVerificationCodeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_management_user_management_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoginResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_management_user_management_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserReference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_management_user_management_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RevokeRefreshTokensReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_management_user_management_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RefreshTokenRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_management_user_management_service_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppTokenRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_management_user_management_service_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppTokenValidation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_management_user_management_service_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProfileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_management_user_management_service_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserAuthInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_management_user_management_service_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResendContactVerificationReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_management_user_management_service_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PasswordChangeMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_management_user_management_service_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InitiateResetPasswordMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_management_user_management_service_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetInfosForResetPasswordMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_management_user_management_service_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserInfoForPWReset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_management_user_management_service_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResetPasswordMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_management_user_management_service_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmailChangeMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_management_user_management_service_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LanguageChangeMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_management_user_management_service_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContactPreferencesMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_management_user_management_service_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContactInfoMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_management_user_management_service_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JWTRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_management_user_management_service_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RefreshJWTRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_management_user_management_service_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateUserReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_management_user_management_service_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoleMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_management_user_management_service_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamUsersMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_management_user_management_service_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindNonParticipantUsersMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_management_user_management_service_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserListMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_management_user_management_service_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TempToken); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_management_user_management_service_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TokenResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_management_user_management_service_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamUsersMsg_Filters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_user_management_user_management_service_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   35,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_user_management_user_management_service_proto_goTypes,
		DependencyIndexes: file_user_management_user_management_service_proto_depIdxs,
		EnumInfos:         file_user_management_user_management_service_proto_enumTypes,
		MessageInfos:      file_user_management_user_management_service_proto_msgTypes,
	}.Build()
	File_user_management_user_management_service_proto = out.File
	file_user_management_user_management_service_proto_rawDesc = nil
	file_user_management_user_management_service_proto_goTypes = nil
	file_user_management_user_management_service_proto_depIdxs = nil
}
